/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using comp5210.node;

namespace comp5210.lexer {

internal class PushbackReader {
  private TextReader reader;
  private Stack stack = new Stack ();


  internal PushbackReader (TextReader reader)
  {
    this.reader = reader;
  }

  internal int Peek ()
  {
    if ( stack.Count > 0 ) return (int)stack.Peek();
    return reader.Peek();
  }

  internal int Read ()
  {
    if ( stack.Count > 0 ) return (int)stack.Pop();
    return reader.Read();
  }

  internal void Unread (int v)
  {
    stack.Push (v);
  }
}

public class LexerException : ApplicationException
{
    public LexerException(String message) : base (message)
    {
    }
}

public class Lexer
{
    protected Token token;
    protected State currentState = State.INITIAL;

    private PushbackReader input;
    private int line;
    private int pos;
    private bool cr;
    private bool eof;
    private StringBuilder text = new StringBuilder();

    protected virtual void Filter()
    {
    }

    public Lexer(TextReader input)
    {
        this.input = new PushbackReader(input);
    }

    public virtual Token Peek()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        return token;
    }

    public virtual Token Next()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected virtual Token GetToken()
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = Lexer.gotoTable[currentState.id()];
        int[] accept = Lexer.accept[currentState.id()];
        text.Length = 0;

        while(true)
        {
            int c = GetChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.Append((char) c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.Length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.Length;
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = New0(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = New1(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = New2(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = New3(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = New4(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = New5(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = New6(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = New7(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = New8(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = New9(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = New10(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = New11(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = New12(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = New13(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = New14(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = New15(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = New16(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = New17(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = New18(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = New19(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = New20(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = New21(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = New22(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = New23(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = New24(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = New25(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = New26(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = New27(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = New28(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = New29(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = New30(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = New31(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = New32(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = New33(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = New34(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = New35(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = New36(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = New37(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = New38(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = New39(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = New40(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = New41(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = New42(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = New43(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.Length > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    private Token New0(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    private Token New1(String text, int line, int pos) { return new TComment(text, line, pos); }
    private Token New2(String text, int line, int pos) { return new TRwElse(text, line, pos); }
    private Token New3(String text, int line, int pos) { return new TRwConstant(text, line, pos); }
    private Token New4(String text, int line, int pos) { return new TRwFunction(text, line, pos); }
    private Token New5(String text, int line, int pos) { return new TRwReturn(text, line, pos); }
    private Token New6(String text, int line, int pos) { return new TRwMain(text, line, pos); }
    private Token New7(String text, int line, int pos) { return new TRwIf(text, line, pos); }
    private Token New8(String text, int line, int pos) { return new TRwWhile(text, line, pos); }
    private Token New9(String text, int line, int pos) { return new TRwFor(text, line, pos); }
    private Token New10(String text, int line, int pos) { return new TWrite(text, line, pos); }
    private Token New11(String text, int line, int pos) { return new TOpAdd(text, line, pos); }
    private Token New12(String text, int line, int pos) { return new TOpDivide(text, line, pos); }
    private Token New13(String text, int line, int pos) { return new TOpSubtract(text, line, pos); }
    private Token New14(String text, int line, int pos) { return new TOpMultiply(text, line, pos); }
    private Token New15(String text, int line, int pos) { return new TOpMod(text, line, pos); }
    private Token New16(String text, int line, int pos) { return new TPostfixAdd(text, line, pos); }
    private Token New17(String text, int line, int pos) { return new TPostfixSubtract(text, line, pos); }
    private Token New18(String text, int line, int pos) { return new TUnaryNot(text, line, pos); }
    private Token New19(String text, int line, int pos) { return new TBooleanAnd(text, line, pos); }
    private Token New20(String text, int line, int pos) { return new TBooleanOr(text, line, pos); }
    private Token New21(String text, int line, int pos) { return new TBooleanEquals(text, line, pos); }
    private Token New22(String text, int line, int pos) { return new TBooleanCompareEquals(text, line, pos); }
    private Token New23(String text, int line, int pos) { return new TBooleanCompareIsnotequals(text, line, pos); }
    private Token New24(String text, int line, int pos) { return new TBooleanGreaterEquals(text, line, pos); }
    private Token New25(String text, int line, int pos) { return new TBooleanLesserEquals(text, line, pos); }
    private Token New26(String text, int line, int pos) { return new TBooleanGreaterThan(text, line, pos); }
    private Token New27(String text, int line, int pos) { return new TBooleanLesserThan(text, line, pos); }
    private Token New28(String text, int line, int pos) { return new TOpenparen(text, line, pos); }
    private Token New29(String text, int line, int pos) { return new TCloseparen(text, line, pos); }
    private Token New30(String text, int line, int pos) { return new TOpenbrace(text, line, pos); }
    private Token New31(String text, int line, int pos) { return new TClosebrace(text, line, pos); }
    private Token New32(String text, int line, int pos) { return new TOpenbracket(text, line, pos); }
    private Token New33(String text, int line, int pos) { return new TClosebracket(text, line, pos); }
    private Token New34(String text, int line, int pos) { return new TSemicolon(text, line, pos); }
    private Token New35(String text, int line, int pos) { return new TColon(text, line, pos); }
    private Token New36(String text, int line, int pos) { return new TPeriod(text, line, pos); }
    private Token New37(String text, int line, int pos) { return new TComma(text, line, pos); }
    private Token New38(String text, int line, int pos) { return new TUnderscore(text, line, pos); }
    private Token New39(String text, int line, int pos) { return new TDoublequote(text, line, pos); }
    private Token New40(String text, int line, int pos) { return new TString(text, line, pos); }
    private Token New41(String text, int line, int pos) { return new TInteger(text, line, pos); }
    private Token New42(String text, int line, int pos) { return new TFloat(text, line, pos); }
    private Token New43(String text, int line, int pos) { return new TId(text, line, pos); }

    private int GetChar()
    {
        if(eof)
        {
            return -1;
        }

        int result = input.Read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void PushBack(int acceptLength)
    {
        int length = text.Length;
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }
    }


    protected virtual void Unread(Token token)
    {
        String text = token.Text;
        int length = text.Length;

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }

        pos = token.Pos - 1;
        line = token.Line - 1;
    }

    private string GetText(int acceptLength)
    {
        StringBuilder s = new StringBuilder(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.Append(text[i]);
        }

        return s.ToString();
    }

    private static int[][][][] gotoTable = {
      new int[][][] {
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 2},
          new int[] {13, 13, 3},
          new int[] {32, 32, 4},
          new int[] {33, 33, 5},
          new int[] {34, 34, 6},
          new int[] {37, 37, 7},
          new int[] {38, 38, 8},
          new int[] {40, 40, 9},
          new int[] {41, 41, 10},
          new int[] {42, 42, 11},
          new int[] {43, 43, 12},
          new int[] {44, 44, 13},
          new int[] {45, 45, 14},
          new int[] {46, 46, 15},
          new int[] {47, 47, 16},
          new int[] {48, 48, 17},
          new int[] {49, 57, 18},
          new int[] {58, 58, 19},
          new int[] {59, 59, 20},
          new int[] {60, 60, 21},
          new int[] {61, 61, 22},
          new int[] {62, 62, 23},
          new int[] {65, 65, 24},
          new int[] {66, 67, 25},
          new int[] {68, 68, 26},
          new int[] {69, 69, 27},
          new int[] {70, 72, 25},
          new int[] {73, 73, 28},
          new int[] {74, 76, 25},
          new int[] {77, 77, 29},
          new int[] {78, 78, 30},
          new int[] {79, 79, 31},
          new int[] {80, 82, 25},
          new int[] {83, 83, 32},
          new int[] {84, 90, 25},
          new int[] {91, 91, 33},
          new int[] {93, 93, 34},
          new int[] {95, 95, 35},
          new int[] {97, 98, 25},
          new int[] {99, 99, 36},
          new int[] {100, 100, 25},
          new int[] {101, 101, 37},
          new int[] {102, 102, 38},
          new int[] {103, 104, 25},
          new int[] {105, 105, 39},
          new int[] {106, 108, 25},
          new int[] {109, 109, 40},
          new int[] {110, 113, 25},
          new int[] {114, 114, 41},
          new int[] {115, 115, 42},
          new int[] {116, 118, 25},
          new int[] {119, 119, 43},
          new int[] {120, 122, 25},
          new int[] {123, 123, 44},
          new int[] {124, 124, 45},
          new int[] {125, 125, 46},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {61, 61, 47},
        },
        new int[][] {
          new int[] {32, 33, 48},
          new int[] {34, 34, 49},
          new int[] {35, 91, 50},
          new int[] {92, 92, 51},
          new int[] {93, 126, 52},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {38, 38, 53},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {43, 43, 54},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {45, 45, 55},
        },
        new int[][] {
          new int[] {48, 57, 56},
        },
        new int[][] {
          new int[] {42, 42, 57},
          new int[] {47, 47, 58},
        },
        new int[][] {
          new int[] {46, 46, 59},
          new int[] {48, 57, 60},
        },
        new int[][] {
          new int[] {46, 46, 61},
          new int[] {48, 57, 62},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {61, 61, 63},
        },
        new int[][] {
          new int[] {61, 61, 64},
        },
        new int[][] {
          new int[] {61, 61, 65},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 67, 67},
          new int[] {68, 68, 68},
          new int[] {69, 77, 67},
          new int[] {78, 78, 69},
          new int[] {79, 90, 67},
          new int[] {95, 95, 70},
          new int[] {97, 122, 67},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 72, 67},
          new int[] {73, 73, 71},
          new int[] {74, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 80, 67},
          new int[] {81, 81, 72},
          new int[] {82, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 82, 67},
          new int[] {83, 83, 73},
          new int[] {84, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 78, 67},
          new int[] {79, 79, 74},
          new int[] {80, 84, 67},
          new int[] {85, 85, 75},
          new int[] {86, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 78, -31},
          new int[] {79, 79, 76},
          new int[] {80, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 81, 67},
          new int[] {82, 82, 77},
          new int[] {83, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 84, 67},
          new int[] {85, 85, 78},
          new int[] {86, 122, -31},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 110, 67},
          new int[] {111, 111, 79},
          new int[] {112, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 107, 67},
          new int[] {108, 108, 80},
          new int[] {109, 122, 67},
        },
        new int[][] {
          new int[] {48, 110, -38},
          new int[] {111, 111, 81},
          new int[] {112, 116, 67},
          new int[] {117, 117, 82},
          new int[] {118, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 101, 67},
          new int[] {102, 102, 83},
          new int[] {103, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 97, 84},
          new int[] {98, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 100, 67},
          new int[] {101, 101, 85},
          new int[] {102, 122, 67},
        },
        new int[][] {
          new int[] {48, 110, -38},
          new int[] {111, 111, 86},
          new int[] {112, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 103, 67},
          new int[] {104, 104, 87},
          new int[] {105, 122, 67},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {124, 124, 88},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {32, 126, -8},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {32, 126, -8},
        },
        new int[][] {
          new int[] {34, 34, 89},
        },
        new int[][] {
          new int[] {32, 126, -8},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 57, 56},
          new int[] {69, 69, 90},
          new int[] {101, 101, 91},
        },
        new int[][] {
          new int[] {9, 9, 92},
          new int[] {10, 10, 93},
          new int[] {13, 13, 94},
          new int[] {32, 41, 95},
          new int[] {42, 42, 96},
          new int[] {43, 127, 95},
        },
        new int[][] {
          new int[] {10, 10, 97},
          new int[] {13, 13, 98},
          new int[] {32, 127, 99},
        },
        new int[][] {
          new int[] {48, 57, 100},
        },
        new int[][] {
          new int[] {46, 46, 101},
          new int[] {48, 57, 60},
        },
        new int[][] {
          new int[] {48, 57, 102},
        },
        new int[][] {
          new int[] {46, 46, 103},
          new int[] {48, 57, 62},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 67, -26},
          new int[] {68, 68, 104},
          new int[] {69, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 67, -26},
          new int[] {68, 68, 105},
          new int[] {69, 122, -70},
        },
        new int[][] {
          new int[] {48, 90, -27},
          new int[] {97, 122, 67},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 85, 67},
          new int[] {86, 86, 106},
          new int[] {87, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 84, -34},
          new int[] {85, 85, 107},
          new int[] {86, 122, -31},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 68, 67},
          new int[] {69, 69, 108},
          new int[] {70, 70, 67},
          new int[] {71, 71, 109},
          new int[] {72, 75, 67},
          new int[] {76, 76, 110},
          new int[] {77, 77, 67},
          new int[] {78, 78, 111},
          new int[] {79, 122, -26},
        },
        new int[][] {
          new int[] {48, 67, -26},
          new int[] {68, 68, 112},
          new int[] {69, 122, -70},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 75, 67},
          new int[] {76, 76, 113},
          new int[] {77, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 83, 67},
          new int[] {84, 84, 114},
          new int[] {85, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 67},
          new int[] {66, 66, 115},
          new int[] {67, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 109, 67},
          new int[] {110, 110, 116},
          new int[] {111, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 114, 67},
          new int[] {115, 115, 117},
          new int[] {116, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 113, 67},
          new int[] {114, 114, 118},
          new int[] {115, 122, 67},
        },
        new int[][] {
          new int[] {48, 109, -81},
          new int[] {110, 110, 119},
          new int[] {111, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 104, 67},
          new int[] {105, 105, 120},
          new int[] {106, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 115, 67},
          new int[] {116, 116, 121},
          new int[] {117, 122, 67},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 116, 67},
          new int[] {117, 117, 122},
          new int[] {118, 122, 67},
        },
        new int[][] {
          new int[] {48, 104, -86},
          new int[] {105, 105, 123},
          new int[] {106, 122, 67},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {32, 126, -8},
        },
        new int[][] {
          new int[] {45, 45, 124},
          new int[] {49, 57, 125},
        },
        new int[][] {
          new int[] {45, 57, -92},
        },
        new int[][] {
          new int[] {9, 127, -59},
        },
        new int[][] {
          new int[] {9, 127, -59},
        },
        new int[][] {
          new int[] {9, 127, -59},
        },
        new int[][] {
          new int[] {9, 127, -59},
        },
        new int[][] {
          new int[] {9, 9, 126},
          new int[] {10, 10, 127},
          new int[] {13, 13, 128},
          new int[] {32, 41, 129},
          new int[] {42, 42, 96},
          new int[] {43, 46, 129},
          new int[] {47, 47, 130},
          new int[] {48, 127, 129},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {10, 127, -60},
        },
        new int[][] {
          new int[] {48, 57, 100},
          new int[] {69, 101, -58},
        },
        new int[][] {
          new int[] {48, 57, 56},
        },
        new int[][] {
          new int[] {48, 57, 102},
          new int[] {69, 101, -58},
        },
        new int[][] {
          new int[] {48, 57, 131},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 132},
          new int[] {66, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 80, -29},
          new int[] {81, 81, 133},
          new int[] {82, 122, -29},
        },
        new int[][] {
          new int[] {48, 81, -33},
          new int[] {82, 82, 134},
          new int[] {83, 122, -33},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 135},
          new int[] {70, 90, 67},
          new int[] {95, 122, -26},
        },
        new int[][] {
          new int[] {48, 78, -31},
          new int[] {79, 79, 136},
          new int[] {80, 122, -32},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 83, -78},
          new int[] {84, 84, 137},
          new int[] {85, 122, -78},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 114, -82},
          new int[] {115, 115, 138},
          new int[] {116, 122, 67},
        },
        new int[][] {
          new int[] {48, 100, -43},
          new int[] {101, 101, 139},
          new int[] {102, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 95, -27},
          new int[] {97, 98, 67},
          new int[] {99, 99, 140},
          new int[] {100, 122, 67},
        },
        new int[][] {
          new int[] {48, 109, -81},
          new int[] {110, 110, 141},
          new int[] {111, 122, 67},
        },
        new int[][] {
          new int[] {48, 116, -88},
          new int[] {117, 117, 142},
          new int[] {118, 122, 67},
        },
        new int[][] {
          new int[] {48, 115, -87},
          new int[] {116, 116, 143},
          new int[] {117, 122, 67},
        },
        new int[][] {
          new int[] {48, 107, -39},
          new int[] {108, 108, 144},
          new int[] {109, 122, 67},
        },
        new int[][] {
          new int[] {49, 57, 125},
        },
        new int[][] {
          new int[] {48, 57, 145},
        },
        new int[][] {
          new int[] {9, 9, 146},
          new int[] {10, 10, 147},
          new int[] {13, 13, 148},
          new int[] {32, 41, 149},
          new int[] {42, 42, 150},
          new int[] {43, 127, 149},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 57, 131},
          new int[] {69, 101, -58},
        },
        new int[][] {
          new int[] {48, 75, -77},
          new int[] {76, 76, 151},
          new int[] {77, 122, -77},
        },
        new int[][] {
          new int[] {48, 84, -34},
          new int[] {85, 85, 152},
          new int[] {86, 122, -31},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 153},
          new int[] {70, 122, -112},
        },
        new int[][] {
          new int[] {48, 82, -30},
          new int[] {83, 83, 154},
          new int[] {84, 122, -30},
        },
        new int[][] {
          new int[] {48, 83, -78},
          new int[] {84, 84, 155},
          new int[] {85, 122, -78},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 115, -87},
          new int[] {116, 116, 156},
          new int[] {117, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 115, -87},
          new int[] {116, 116, 157},
          new int[] {117, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 113, -83},
          new int[] {114, 114, 158},
          new int[] {115, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 100, -43},
          new int[] {101, 101, 159},
          new int[] {102, 122, 67},
        },
        new int[][] {
          new int[] {48, 57, 145},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
          new int[] {9, 127, -128},
        },
        new int[][] {
          new int[] {9, 41, -98},
          new int[] {42, 42, 150},
          new int[] {43, 127, -98},
        },
        new int[][] {
          new int[] {48, 82, -30},
          new int[] {83, 83, 160},
          new int[] {84, 122, -30},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 161},
          new int[] {66, 122, -109},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 162},
          new int[] {66, 122, -109},
        },
        new int[][] {
          new int[] {48, 82, -30},
          new int[] {83, 83, 163},
          new int[] {84, 122, -30},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 164},
          new int[] {70, 122, -112},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 104, -86},
          new int[] {105, 105, 165},
          new int[] {106, 122, 67},
        },
        new int[][] {
          new int[] {48, 109, -81},
          new int[] {110, 110, 166},
          new int[] {111, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 75, -77},
          new int[] {76, 76, 167},
          new int[] {77, 122, -77},
        },
        new int[][] {
          new int[] {48, 83, -78},
          new int[] {84, 84, 168},
          new int[] {85, 122, -78},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 169},
          new int[] {70, 122, -112},
        },
        new int[][] {
          new int[] {48, 80, -29},
          new int[] {81, 81, 170},
          new int[] {82, 122, -29},
        },
        new int[][] {
          new int[] {48, 110, -38},
          new int[] {111, 111, 171},
          new int[] {112, 122, 67},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 172},
          new int[] {70, 122, -112},
        },
        new int[][] {
          new int[] {48, 81, -33},
          new int[] {82, 82, 173},
          new int[] {83, 122, -33},
        },
        new int[][] {
          new int[] {48, 84, -34},
          new int[] {85, 85, 174},
          new int[] {86, 122, -31},
        },
        new int[][] {
          new int[] {48, 109, -81},
          new int[] {110, 110, 175},
          new int[] {111, 122, 67},
        },
        new int[][] {
          new int[] {48, 81, -33},
          new int[] {82, 82, 176},
          new int[] {83, 122, -33},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 177},
          new int[] {70, 122, -112},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 178},
          new int[] {66, 122, -109},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 68, -75},
          new int[] {69, 69, 179},
          new int[] {70, 122, -112},
        },
        new int[][] {
          new int[] {48, 80, -29},
          new int[] {81, 81, 180},
          new int[] {82, 122, -29},
        },
        new int[][] {
          new int[] {48, 75, -77},
          new int[] {76, 76, 181},
          new int[] {77, 122, -77},
        },
        new int[][] {
          new int[] {48, 80, -29},
          new int[] {81, 81, 182},
          new int[] {82, 122, -29},
        },
        new int[][] {
          new int[] {48, 84, -34},
          new int[] {85, 85, 183},
          new int[] {86, 122, -31},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 84, -34},
          new int[] {85, 85, 184},
          new int[] {86, 122, -31},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 185},
          new int[] {66, 122, -109},
        },
        new int[][] {
          new int[] {48, 57, 66},
          new int[] {65, 65, 186},
          new int[] {66, 122, -109},
        },
        new int[][] {
          new int[] {48, 75, -77},
          new int[] {76, 76, 187},
          new int[] {77, 122, -77},
        },
        new int[][] {
          new int[] {48, 75, -77},
          new int[] {76, 76, 188},
          new int[] {77, 122, -77},
        },
        new int[][] {
          new int[] {48, 82, -30},
          new int[] {83, 83, 189},
          new int[] {84, 122, -30},
        },
        new int[][] {
          new int[] {48, 82, -30},
          new int[] {83, 83, 190},
          new int[] {84, 122, -30},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
        new int[][] {
          new int[] {48, 122, -27},
        },
      },
    };

    private static int[][] accept = {
      new int[] {
        -1, 0, 0, 0, 0, 18, 39, 15, -1, 28, 29, 14, 11, 37, 13, 36, 
        12, 41, 41, 35, 34, 27, 21, 26, 43, 43, 43, 43, 43, 43, 43, 43, 
        43, 32, 33, 38, 43, 43, 43, 43, 43, 43, 43, 43, 30, -1, 31, 23, 
        -1, 40, -1, -1, -1, 19, 16, 17, -1, -1, -1, -1, -1, -1, 41, 25, 
        22, 24, 43, 43, 43, 43, -1, 43, 43, 43, 43, 43, 43, 20, 43, 43, 
        43, 43, 43, 7, 43, 43, 43, 43, 20, -1, -1, -1, -1, -1, -1, -1, 
        -1, 1, 1, -1, 42, -1, 42, -1, 11, 19, 12, 43, 43, 43, 43, 43, 
        15, 43, 18, 13, 43, 43, 9, 43, 43, 43, 43, 43, -1, 42, -1, -1, 
        -1, -1, 1, 42, 43, 43, 43, 43, 43, 14, 43, 2, 43, 6, 43, 10, 
        43, 42, -1, -1, -1, -1, -1, 43, 43, 43, 43, 43, 3, 43, 43, 8, 
        21, 43, 43, 43, 43, 43, 5, 22, 43, 43, 43, 43, 43, 27, 43, 4, 
        26, 43, 43, 43, 43, 23, 43, 43, 43, 43, 43, 43, 43, 25, 24, 
      },
    };

    public class State
    {
        public static State INITIAL = new State(0);

        private int _id;

        private State(int _id)
        {
            this._id = _id;
        }

        public int id()
        {
            return _id;
        }
    }
}
}
