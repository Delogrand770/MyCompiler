/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PMain : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PDecs : Node
{
}

public abstract class PArrayDecs : Node
{
}

public abstract class PLiteral : Node
{
}

public abstract class PArray : Node
{
}

public abstract class PMainentry : Node
{
}

public abstract class PFuncs : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PIfStmnt : Node
{
}

public abstract class PWhileStmnt : Node
{
}

public abstract class PForStmnt : Node
{
}

public abstract class PFuncCall : Node
{
}

public abstract class PReturnStmnt : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PBooleanExpression : Node
{
}

public abstract class PBooleanExpression1 : Node
{
}

public abstract class PBooleanExpression2 : Node
{
}

public abstract class PBooleanExpression3 : Node
{
}

public abstract class PBooleanExpression4 : Node
{
}

public abstract class PBooleanExpression5 : Node
{
}

public abstract class PBooleanExpression6 : Node
{
}

public abstract class PBooleanExpression7 : Node
{
}

public abstract class PMathExpression : Node
{
}

public abstract class PMathExpression1 : Node
{
}

public abstract class PMathExpression2 : Node
{
}

public abstract class PMathExpression3 : Node
{
}

public abstract class PMathExpression4 : Node
{
}

public abstract class PMathExpression5 : Node
{
}

public abstract class PMathExpression6 : Node
{
}

public abstract class PMathExpression7 : Node
{
}

public abstract class PMathExpression8 : Node
{
}

public abstract class PMathExpression9 : Node
{
}


public sealed class AMain : PMain
{
    private PConstants _constants_;
    private PDecs _decs_;
    private PMainentry _mainentry_;
    private PFuncs _funcs_;

    public AMain ()
    {
    }

    public AMain (
            PConstants _constants_,
            PDecs _decs_,
            PMainentry _mainentry_,
            PFuncs _funcs_
    )
    {
        SetConstants (_constants_);
        SetDecs (_decs_);
        SetMainentry (_mainentry_);
        SetFuncs (_funcs_);
    }

    public override Object Clone()
    {
        return new AMain (
            (PConstants)CloneNode (_constants_),
            (PDecs)CloneNode (_decs_),
            (PMainentry)CloneNode (_mainentry_),
            (PFuncs)CloneNode (_funcs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMain(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PDecs GetDecs ()
    {
        return _decs_;
    }

    public void SetDecs (PDecs node)
    {
        if(_decs_ != null)
        {
            _decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decs_ = node;
    }
    public PMainentry GetMainentry ()
    {
        return _mainentry_;
    }

    public void SetMainentry (PMainentry node)
    {
        if(_mainentry_ != null)
        {
            _mainentry_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mainentry_ = node;
    }
    public PFuncs GetFuncs ()
    {
        return _funcs_;
    }

    public void SetFuncs (PFuncs node)
    {
        if(_funcs_ != null)
        {
            _funcs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_decs_)
            + ToString (_mainentry_)
            + ToString (_funcs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _decs_ == child )
        {
            _decs_ = null;
            return;
        }
        if ( _mainentry_ == child )
        {
            _mainentry_ = null;
            return;
        }
        if ( _funcs_ == child )
        {
            _funcs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _decs_ == oldChild )
        {
            SetDecs ((PDecs) newChild);
            return;
        }
        if ( _mainentry_ == oldChild )
        {
            SetMainentry ((PMainentry) newChild);
            return;
        }
        if ( _funcs_ == oldChild )
        {
            SetFuncs ((PFuncs) newChild);
            return;
        }
    }

}
public sealed class AIniConstants : PConstants
{
    private TRwConstant _rw_constant_;
    private TId _id_;
    private TBooleanEquals _boolean_equals_;
    private PBooleanExpression _boolean_expression_;
    private TSemicolon _semicolon_;
    private PConstants _constants_;

    public AIniConstants ()
    {
    }

    public AIniConstants (
            TRwConstant _rw_constant_,
            TId _id_,
            TBooleanEquals _boolean_equals_,
            PBooleanExpression _boolean_expression_,
            TSemicolon _semicolon_,
            PConstants _constants_
    )
    {
        SetRwConstant (_rw_constant_);
        SetId (_id_);
        SetBooleanEquals (_boolean_equals_);
        SetBooleanExpression (_boolean_expression_);
        SetSemicolon (_semicolon_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AIniConstants (
            (TRwConstant)CloneNode (_rw_constant_),
            (TId)CloneNode (_id_),
            (TBooleanEquals)CloneNode (_boolean_equals_),
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TSemicolon)CloneNode (_semicolon_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIniConstants(this);
    }

    public TRwConstant GetRwConstant ()
    {
        return _rw_constant_;
    }

    public void SetRwConstant (TRwConstant node)
    {
        if(_rw_constant_ != null)
        {
            _rw_constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_constant_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TBooleanEquals GetBooleanEquals ()
    {
        return _boolean_equals_;
    }

    public void SetBooleanEquals (TBooleanEquals node)
    {
        if(_boolean_equals_ != null)
        {
            _boolean_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_equals_ = node;
    }
    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_constant_)
            + ToString (_id_)
            + ToString (_boolean_equals_)
            + ToString (_boolean_expression_)
            + ToString (_semicolon_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_constant_ == child )
        {
            _rw_constant_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _boolean_equals_ == child )
        {
            _boolean_equals_ = null;
            return;
        }
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_constant_ == oldChild )
        {
            SetRwConstant ((TRwConstant) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _boolean_equals_ == oldChild )
        {
            SetBooleanEquals ((TBooleanEquals) newChild);
            return;
        }
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ADeclaredConstants : PConstants
{
    private TRwConstant _rw_constant_;
    private TId _id_;
    private TSemicolon _semicolon_;
    private PConstants _constants_;

    public ADeclaredConstants ()
    {
    }

    public ADeclaredConstants (
            TRwConstant _rw_constant_,
            TId _id_,
            TSemicolon _semicolon_,
            PConstants _constants_
    )
    {
        SetRwConstant (_rw_constant_);
        SetId (_id_);
        SetSemicolon (_semicolon_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new ADeclaredConstants (
            (TRwConstant)CloneNode (_rw_constant_),
            (TId)CloneNode (_id_),
            (TSemicolon)CloneNode (_semicolon_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclaredConstants(this);
    }

    public TRwConstant GetRwConstant ()
    {
        return _rw_constant_;
    }

    public void SetRwConstant (TRwConstant node)
    {
        if(_rw_constant_ != null)
        {
            _rw_constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_constant_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_constant_)
            + ToString (_id_)
            + ToString (_semicolon_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_constant_ == child )
        {
            _rw_constant_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_constant_ == oldChild )
        {
            SetRwConstant ((TRwConstant) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ANoneConstants : PConstants
{


    public ANoneConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIniDecs : PDecs
{
    private TId _type_;
    private TId _var_;
    private TBooleanEquals _boolean_equals_;
    private PBooleanExpression _boolean_expression_;
    private TSemicolon _semicolon_;
    private PDecs _decs_;

    public AIniDecs ()
    {
    }

    public AIniDecs (
            TId _type_,
            TId _var_,
            TBooleanEquals _boolean_equals_,
            PBooleanExpression _boolean_expression_,
            TSemicolon _semicolon_,
            PDecs _decs_
    )
    {
        SetType (_type_);
        SetVar (_var_);
        SetBooleanEquals (_boolean_equals_);
        SetBooleanExpression (_boolean_expression_);
        SetSemicolon (_semicolon_);
        SetDecs (_decs_);
    }

    public override Object Clone()
    {
        return new AIniDecs (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_),
            (TBooleanEquals)CloneNode (_boolean_equals_),
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TSemicolon)CloneNode (_semicolon_),
            (PDecs)CloneNode (_decs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIniDecs(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVar ()
    {
        return _var_;
    }

    public void SetVar (TId node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TBooleanEquals GetBooleanEquals ()
    {
        return _boolean_equals_;
    }

    public void SetBooleanEquals (TBooleanEquals node)
    {
        if(_boolean_equals_ != null)
        {
            _boolean_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_equals_ = node;
    }
    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PDecs GetDecs ()
    {
        return _decs_;
    }

    public void SetDecs (PDecs node)
    {
        if(_decs_ != null)
        {
            _decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_)
            + ToString (_boolean_equals_)
            + ToString (_boolean_expression_)
            + ToString (_semicolon_)
            + ToString (_decs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _boolean_equals_ == child )
        {
            _boolean_equals_ = null;
            return;
        }
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _decs_ == child )
        {
            _decs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TId) newChild);
            return;
        }
        if ( _boolean_equals_ == oldChild )
        {
            SetBooleanEquals ((TBooleanEquals) newChild);
            return;
        }
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _decs_ == oldChild )
        {
            SetDecs ((PDecs) newChild);
            return;
        }
    }

}
public sealed class ADeclaredDecs : PDecs
{
    private TId _type_;
    private TId _var_;
    private TSemicolon _semicolon_;
    private PDecs _decs_;

    public ADeclaredDecs ()
    {
    }

    public ADeclaredDecs (
            TId _type_,
            TId _var_,
            TSemicolon _semicolon_,
            PDecs _decs_
    )
    {
        SetType (_type_);
        SetVar (_var_);
        SetSemicolon (_semicolon_);
        SetDecs (_decs_);
    }

    public override Object Clone()
    {
        return new ADeclaredDecs (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_),
            (TSemicolon)CloneNode (_semicolon_),
            (PDecs)CloneNode (_decs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclaredDecs(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVar ()
    {
        return _var_;
    }

    public void SetVar (TId node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PDecs GetDecs ()
    {
        return _decs_;
    }

    public void SetDecs (PDecs node)
    {
        if(_decs_ != null)
        {
            _decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_)
            + ToString (_semicolon_)
            + ToString (_decs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _decs_ == child )
        {
            _decs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TId) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _decs_ == oldChild )
        {
            SetDecs ((PDecs) newChild);
            return;
        }
    }

}
public sealed class AArraysDecs : PDecs
{
    private PArrayDecs _array_decs_;

    public AArraysDecs ()
    {
    }

    public AArraysDecs (
            PArrayDecs _array_decs_
    )
    {
        SetArrayDecs (_array_decs_);
    }

    public override Object Clone()
    {
        return new AArraysDecs (
            (PArrayDecs)CloneNode (_array_decs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArraysDecs(this);
    }

    public PArrayDecs GetArrayDecs ()
    {
        return _array_decs_;
    }

    public void SetArrayDecs (PArrayDecs node)
    {
        if(_array_decs_ != null)
        {
            _array_decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _array_decs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_array_decs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _array_decs_ == child )
        {
            _array_decs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _array_decs_ == oldChild )
        {
            SetArrayDecs ((PArrayDecs) newChild);
            return;
        }
    }

}
public sealed class ADeclaredArrayDecs : PArrayDecs
{
    private TId _type_;
    private TId _var_;
    private TOpenbracket _openbracket_;
    private PBooleanExpression _boolean_expression_;
    private TClosebracket _closebracket_;
    private TSemicolon _semicolon_;
    private PDecs _decs_;

    public ADeclaredArrayDecs ()
    {
    }

    public ADeclaredArrayDecs (
            TId _type_,
            TId _var_,
            TOpenbracket _openbracket_,
            PBooleanExpression _boolean_expression_,
            TClosebracket _closebracket_,
            TSemicolon _semicolon_,
            PDecs _decs_
    )
    {
        SetType (_type_);
        SetVar (_var_);
        SetOpenbracket (_openbracket_);
        SetBooleanExpression (_boolean_expression_);
        SetClosebracket (_closebracket_);
        SetSemicolon (_semicolon_);
        SetDecs (_decs_);
    }

    public override Object Clone()
    {
        return new ADeclaredArrayDecs (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TClosebracket)CloneNode (_closebracket_),
            (TSemicolon)CloneNode (_semicolon_),
            (PDecs)CloneNode (_decs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclaredArrayDecs(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVar ()
    {
        return _var_;
    }

    public void SetVar (TId node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PDecs GetDecs ()
    {
        return _decs_;
    }

    public void SetDecs (PDecs node)
    {
        if(_decs_ != null)
        {
            _decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_)
            + ToString (_openbracket_)
            + ToString (_boolean_expression_)
            + ToString (_closebracket_)
            + ToString (_semicolon_)
            + ToString (_decs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _decs_ == child )
        {
            _decs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TId) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _decs_ == oldChild )
        {
            SetDecs ((PDecs) newChild);
            return;
        }
    }

}
public sealed class AIniArrayDecs : PArrayDecs
{
    private TId _type_;
    private TId _var_;
    private TBooleanEquals _boolean_equals_;
    private TOpenbracket _openbracket_;
    private PParameter _parameter_;
    private TClosebracket _closebracket_;
    private TSemicolon _semicolon_;
    private PDecs _decs_;

    public AIniArrayDecs ()
    {
    }

    public AIniArrayDecs (
            TId _type_,
            TId _var_,
            TBooleanEquals _boolean_equals_,
            TOpenbracket _openbracket_,
            PParameter _parameter_,
            TClosebracket _closebracket_,
            TSemicolon _semicolon_,
            PDecs _decs_
    )
    {
        SetType (_type_);
        SetVar (_var_);
        SetBooleanEquals (_boolean_equals_);
        SetOpenbracket (_openbracket_);
        SetParameter (_parameter_);
        SetClosebracket (_closebracket_);
        SetSemicolon (_semicolon_);
        SetDecs (_decs_);
    }

    public override Object Clone()
    {
        return new AIniArrayDecs (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_),
            (TBooleanEquals)CloneNode (_boolean_equals_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PParameter)CloneNode (_parameter_),
            (TClosebracket)CloneNode (_closebracket_),
            (TSemicolon)CloneNode (_semicolon_),
            (PDecs)CloneNode (_decs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIniArrayDecs(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVar ()
    {
        return _var_;
    }

    public void SetVar (TId node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TBooleanEquals GetBooleanEquals ()
    {
        return _boolean_equals_;
    }

    public void SetBooleanEquals (TBooleanEquals node)
    {
        if(_boolean_equals_ != null)
        {
            _boolean_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_equals_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PDecs GetDecs ()
    {
        return _decs_;
    }

    public void SetDecs (PDecs node)
    {
        if(_decs_ != null)
        {
            _decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_)
            + ToString (_boolean_equals_)
            + ToString (_openbracket_)
            + ToString (_parameter_)
            + ToString (_closebracket_)
            + ToString (_semicolon_)
            + ToString (_decs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _boolean_equals_ == child )
        {
            _boolean_equals_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _decs_ == child )
        {
            _decs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TId) newChild);
            return;
        }
        if ( _boolean_equals_ == oldChild )
        {
            SetBooleanEquals ((TBooleanEquals) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _decs_ == oldChild )
        {
            SetDecs ((PDecs) newChild);
            return;
        }
    }

}
public sealed class ANoneArrayDecs : PArrayDecs
{


    public ANoneArrayDecs (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneArrayDecs (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneArrayDecs(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIntegerLiteral : PLiteral
{
    private TInteger _integer_;

    public AIntegerLiteral ()
    {
    }

    public AIntegerLiteral (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntegerLiteral (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerLiteral(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatLiteral : PLiteral
{
    private TFloat _float_;

    public AFloatLiteral ()
    {
    }

    public AFloatLiteral (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatLiteral (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatLiteral(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AIdLiteral : PLiteral
{
    private TId _id_;

    public AIdLiteral ()
    {
    }

    public AIdLiteral (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIdLiteral (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdLiteral(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringLiteral : PLiteral
{
    private TString _string_;

    public AStringLiteral ()
    {
    }

    public AStringLiteral (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringLiteral (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringLiteral(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AArrayLiteral : PLiteral
{
    private PArray _array_;

    public AArrayLiteral ()
    {
    }

    public AArrayLiteral (
            PArray _array_
    )
    {
        SetArray (_array_);
    }

    public override Object Clone()
    {
        return new AArrayLiteral (
            (PArray)CloneNode (_array_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayLiteral(this);
    }

    public PArray GetArray ()
    {
        return _array_;
    }

    public void SetArray (PArray node)
    {
        if(_array_ != null)
        {
            _array_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _array_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_array_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _array_ == child )
        {
            _array_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _array_ == oldChild )
        {
            SetArray ((PArray) newChild);
            return;
        }
    }

}
public sealed class AArrayArray : PArray
{
    private TId _id_;
    private TOpenbracket _openbracket_;
    private PBooleanExpression _boolean_expression_;
    private TClosebracket _closebracket_;

    public AArrayArray ()
    {
    }

    public AArrayArray (
            TId _id_,
            TOpenbracket _openbracket_,
            PBooleanExpression _boolean_expression_,
            TClosebracket _closebracket_
    )
    {
        SetId (_id_);
        SetOpenbracket (_openbracket_);
        SetBooleanExpression (_boolean_expression_);
        SetClosebracket (_closebracket_);
    }

    public override Object Clone()
    {
        return new AArrayArray (
            (TId)CloneNode (_id_),
            (TOpenbracket)CloneNode (_openbracket_),
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TClosebracket)CloneNode (_closebracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayArray(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenbracket GetOpenbracket ()
    {
        return _openbracket_;
    }

    public void SetOpenbracket (TOpenbracket node)
    {
        if(_openbracket_ != null)
        {
            _openbracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbracket_ = node;
    }
    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TClosebracket GetClosebracket ()
    {
        return _closebracket_;
    }

    public void SetClosebracket (TClosebracket node)
    {
        if(_closebracket_ != null)
        {
            _closebracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_openbracket_)
            + ToString (_boolean_expression_)
            + ToString (_closebracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openbracket_ == child )
        {
            _openbracket_ = null;
            return;
        }
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _closebracket_ == child )
        {
            _closebracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openbracket_ == oldChild )
        {
            SetOpenbracket ((TOpenbracket) newChild);
            return;
        }
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _closebracket_ == oldChild )
        {
            SetClosebracket ((TClosebracket) newChild);
            return;
        }
    }

}
public sealed class AMainentry : PMainentry
{
    private TRwMain _rw_main_;
    private TColon _colon_;
    private TRwFunction _rw_function_;
    private TOpenparen _openparen_;
    private TCloseparen _closeparen_;
    private TOpenbrace _openbrace_;
    private PStatement _statement_;
    private TClosebrace _closebrace_;

    public AMainentry ()
    {
    }

    public AMainentry (
            TRwMain _rw_main_,
            TColon _colon_,
            TRwFunction _rw_function_,
            TOpenparen _openparen_,
            TCloseparen _closeparen_,
            TOpenbrace _openbrace_,
            PStatement _statement_,
            TClosebrace _closebrace_
    )
    {
        SetRwMain (_rw_main_);
        SetColon (_colon_);
        SetRwFunction (_rw_function_);
        SetOpenparen (_openparen_);
        SetCloseparen (_closeparen_);
        SetOpenbrace (_openbrace_);
        SetStatement (_statement_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AMainentry (
            (TRwMain)CloneNode (_rw_main_),
            (TColon)CloneNode (_colon_),
            (TRwFunction)CloneNode (_rw_function_),
            (TOpenparen)CloneNode (_openparen_),
            (TCloseparen)CloneNode (_closeparen_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PStatement)CloneNode (_statement_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainentry(this);
    }

    public TRwMain GetRwMain ()
    {
        return _rw_main_;
    }

    public void SetRwMain (TRwMain node)
    {
        if(_rw_main_ != null)
        {
            _rw_main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_main_ = node;
    }
    public TColon GetColon ()
    {
        return _colon_;
    }

    public void SetColon (TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _colon_ = node;
    }
    public TRwFunction GetRwFunction ()
    {
        return _rw_function_;
    }

    public void SetRwFunction (TRwFunction node)
    {
        if(_rw_function_ != null)
        {
            _rw_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_function_ = node;
    }
    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_main_)
            + ToString (_colon_)
            + ToString (_rw_function_)
            + ToString (_openparen_)
            + ToString (_closeparen_)
            + ToString (_openbrace_)
            + ToString (_statement_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_main_ == child )
        {
            _rw_main_ = null;
            return;
        }
        if ( _colon_ == child )
        {
            _colon_ = null;
            return;
        }
        if ( _rw_function_ == child )
        {
            _rw_function_ = null;
            return;
        }
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_main_ == oldChild )
        {
            SetRwMain ((TRwMain) newChild);
            return;
        }
        if ( _colon_ == oldChild )
        {
            SetColon ((TColon) newChild);
            return;
        }
        if ( _rw_function_ == oldChild )
        {
            SetRwFunction ((TRwFunction) newChild);
            return;
        }
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class AFuncs : PFuncs
{
    private TId _id_;
    private TColon _colon_;
    private TRwFunction _rw_function_;
    private TOpenparen _openparen_;
    private PParameter _params_;
    private TCloseparen _closeparen_;
    private TOpenbrace _openbrace_;
    private PStatement _statement_;
    private TClosebrace _closebrace_;
    private PFuncs _funcs_;

    public AFuncs ()
    {
    }

    public AFuncs (
            TId _id_,
            TColon _colon_,
            TRwFunction _rw_function_,
            TOpenparen _openparen_,
            PParameter _params_,
            TCloseparen _closeparen_,
            TOpenbrace _openbrace_,
            PStatement _statement_,
            TClosebrace _closebrace_,
            PFuncs _funcs_
    )
    {
        SetId (_id_);
        SetColon (_colon_);
        SetRwFunction (_rw_function_);
        SetOpenparen (_openparen_);
        SetParams (_params_);
        SetCloseparen (_closeparen_);
        SetOpenbrace (_openbrace_);
        SetStatement (_statement_);
        SetClosebrace (_closebrace_);
        SetFuncs (_funcs_);
    }

    public override Object Clone()
    {
        return new AFuncs (
            (TId)CloneNode (_id_),
            (TColon)CloneNode (_colon_),
            (TRwFunction)CloneNode (_rw_function_),
            (TOpenparen)CloneNode (_openparen_),
            (PParameter)CloneNode (_params_),
            (TCloseparen)CloneNode (_closeparen_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PStatement)CloneNode (_statement_),
            (TClosebrace)CloneNode (_closebrace_),
            (PFuncs)CloneNode (_funcs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncs(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TColon GetColon ()
    {
        return _colon_;
    }

    public void SetColon (TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _colon_ = node;
    }
    public TRwFunction GetRwFunction ()
    {
        return _rw_function_;
    }

    public void SetRwFunction (TRwFunction node)
    {
        if(_rw_function_ != null)
        {
            _rw_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_function_ = node;
    }
    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public PParameter GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParameter node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }
    public PFuncs GetFuncs ()
    {
        return _funcs_;
    }

    public void SetFuncs (PFuncs node)
    {
        if(_funcs_ != null)
        {
            _funcs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_colon_)
            + ToString (_rw_function_)
            + ToString (_openparen_)
            + ToString (_params_)
            + ToString (_closeparen_)
            + ToString (_openbrace_)
            + ToString (_statement_)
            + ToString (_closebrace_)
            + ToString (_funcs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _colon_ == child )
        {
            _colon_ = null;
            return;
        }
        if ( _rw_function_ == child )
        {
            _rw_function_ = null;
            return;
        }
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
        if ( _funcs_ == child )
        {
            _funcs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _colon_ == oldChild )
        {
            SetColon ((TColon) newChild);
            return;
        }
        if ( _rw_function_ == oldChild )
        {
            SetRwFunction ((TRwFunction) newChild);
            return;
        }
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParameter) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
        if ( _funcs_ == oldChild )
        {
            SetFuncs ((PFuncs) newChild);
            return;
        }
    }

}
public sealed class ANoneFuncs : PFuncs
{


    public ANoneFuncs (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFuncs (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFuncs(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AParamParameter : PParameter
{
    private PLiteral _literal_;
    private TComma _comma_;
    private PParameter _parameter_;

    public AParamParameter ()
    {
    }

    public AParamParameter (
            PLiteral _literal_,
            TComma _comma_,
            PParameter _parameter_
    )
    {
        SetLiteral (_literal_);
        SetComma (_comma_);
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new AParamParameter (
            (PLiteral)CloneNode (_literal_),
            (TComma)CloneNode (_comma_),
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamParameter(this);
    }

    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_literal_)
            + ToString (_comma_)
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class AFinalparamParameter : PParameter
{
    private PLiteral _literal_;
    private PParameter _parameter_;

    public AFinalparamParameter ()
    {
    }

    public AFinalparamParameter (
            PLiteral _literal_,
            PParameter _parameter_
    )
    {
        SetLiteral (_literal_);
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new AFinalparamParameter (
            (PLiteral)CloneNode (_literal_),
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFinalparamParameter(this);
    }

    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }
    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_literal_)
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class ANoneParameter : PParameter
{


    public ANoneParameter (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneParameter (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParameter(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIfStmnt : PIfStmnt
{
    private TRwIf _rw_if_;
    private TOpenparen _openparen_;
    private PBooleanExpression _condition_;
    private TCloseparen _closeparen_;
    private TOpenbrace _openbrace_;
    private PStatement _statement_;
    private TClosebrace _closebrace_;

    public AIfStmnt ()
    {
    }

    public AIfStmnt (
            TRwIf _rw_if_,
            TOpenparen _openparen_,
            PBooleanExpression _condition_,
            TCloseparen _closeparen_,
            TOpenbrace _openbrace_,
            PStatement _statement_,
            TClosebrace _closebrace_
    )
    {
        SetRwIf (_rw_if_);
        SetOpenparen (_openparen_);
        SetCondition (_condition_);
        SetCloseparen (_closeparen_);
        SetOpenbrace (_openbrace_);
        SetStatement (_statement_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AIfStmnt (
            (TRwIf)CloneNode (_rw_if_),
            (TOpenparen)CloneNode (_openparen_),
            (PBooleanExpression)CloneNode (_condition_),
            (TCloseparen)CloneNode (_closeparen_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PStatement)CloneNode (_statement_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStmnt(this);
    }

    public TRwIf GetRwIf ()
    {
        return _rw_if_;
    }

    public void SetRwIf (TRwIf node)
    {
        if(_rw_if_ != null)
        {
            _rw_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_if_ = node;
    }
    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public PBooleanExpression GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PBooleanExpression node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_if_)
            + ToString (_openparen_)
            + ToString (_condition_)
            + ToString (_closeparen_)
            + ToString (_openbrace_)
            + ToString (_statement_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_if_ == child )
        {
            _rw_if_ = null;
            return;
        }
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_if_ == oldChild )
        {
            SetRwIf ((TRwIf) newChild);
            return;
        }
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PBooleanExpression) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class AWhileStmnt : PWhileStmnt
{
    private TRwWhile _rw_while_;
    private TOpenparen _openparen_;
    private PBooleanExpression _condition_;
    private TCloseparen _closeparen_;
    private TOpenbrace _openbrace_;
    private PStatement _statement_;
    private TClosebrace _closebrace_;

    public AWhileStmnt ()
    {
    }

    public AWhileStmnt (
            TRwWhile _rw_while_,
            TOpenparen _openparen_,
            PBooleanExpression _condition_,
            TCloseparen _closeparen_,
            TOpenbrace _openbrace_,
            PStatement _statement_,
            TClosebrace _closebrace_
    )
    {
        SetRwWhile (_rw_while_);
        SetOpenparen (_openparen_);
        SetCondition (_condition_);
        SetCloseparen (_closeparen_);
        SetOpenbrace (_openbrace_);
        SetStatement (_statement_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AWhileStmnt (
            (TRwWhile)CloneNode (_rw_while_),
            (TOpenparen)CloneNode (_openparen_),
            (PBooleanExpression)CloneNode (_condition_),
            (TCloseparen)CloneNode (_closeparen_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PStatement)CloneNode (_statement_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStmnt(this);
    }

    public TRwWhile GetRwWhile ()
    {
        return _rw_while_;
    }

    public void SetRwWhile (TRwWhile node)
    {
        if(_rw_while_ != null)
        {
            _rw_while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_while_ = node;
    }
    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public PBooleanExpression GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PBooleanExpression node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_while_)
            + ToString (_openparen_)
            + ToString (_condition_)
            + ToString (_closeparen_)
            + ToString (_openbrace_)
            + ToString (_statement_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_while_ == child )
        {
            _rw_while_ = null;
            return;
        }
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_while_ == oldChild )
        {
            SetRwWhile ((TRwWhile) newChild);
            return;
        }
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PBooleanExpression) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class AForStmnt : PForStmnt
{
    private TRwFor _rw_for_;
    private TOpenparen _openparen_;
    private PBooleanExpression _condition_;
    private TCloseparen _closeparen_;
    private TOpenbrace _openbrace_;
    private PStatement _statement_;
    private TClosebrace _closebrace_;

    public AForStmnt ()
    {
    }

    public AForStmnt (
            TRwFor _rw_for_,
            TOpenparen _openparen_,
            PBooleanExpression _condition_,
            TCloseparen _closeparen_,
            TOpenbrace _openbrace_,
            PStatement _statement_,
            TClosebrace _closebrace_
    )
    {
        SetRwFor (_rw_for_);
        SetOpenparen (_openparen_);
        SetCondition (_condition_);
        SetCloseparen (_closeparen_);
        SetOpenbrace (_openbrace_);
        SetStatement (_statement_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AForStmnt (
            (TRwFor)CloneNode (_rw_for_),
            (TOpenparen)CloneNode (_openparen_),
            (PBooleanExpression)CloneNode (_condition_),
            (TCloseparen)CloneNode (_closeparen_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PStatement)CloneNode (_statement_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForStmnt(this);
    }

    public TRwFor GetRwFor ()
    {
        return _rw_for_;
    }

    public void SetRwFor (TRwFor node)
    {
        if(_rw_for_ != null)
        {
            _rw_for_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_for_ = node;
    }
    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public PBooleanExpression GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PBooleanExpression node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_for_)
            + ToString (_openparen_)
            + ToString (_condition_)
            + ToString (_closeparen_)
            + ToString (_openbrace_)
            + ToString (_statement_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_for_ == child )
        {
            _rw_for_ = null;
            return;
        }
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_for_ == oldChild )
        {
            SetRwFor ((TRwFor) newChild);
            return;
        }
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PBooleanExpression) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class AFuncCall : PFuncCall
{
    private TId _var_;
    private TOpenparen _openparen_;
    private PParameter _parameter_;
    private TCloseparen _closeparen_;
    private TSemicolon _semicolon_;

    public AFuncCall ()
    {
    }

    public AFuncCall (
            TId _var_,
            TOpenparen _openparen_,
            PParameter _parameter_,
            TCloseparen _closeparen_,
            TSemicolon _semicolon_
    )
    {
        SetVar (_var_);
        SetOpenparen (_openparen_);
        SetParameter (_parameter_);
        SetCloseparen (_closeparen_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AFuncCall (
            (TId)CloneNode (_var_),
            (TOpenparen)CloneNode (_openparen_),
            (PParameter)CloneNode (_parameter_),
            (TCloseparen)CloneNode (_closeparen_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncCall(this);
    }

    public TId GetVar ()
    {
        return _var_;
    }

    public void SetVar (TId node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_openparen_)
            + ToString (_parameter_)
            + ToString (_closeparen_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TId) newChild);
            return;
        }
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AReturnsomethingReturnStmnt : PReturnStmnt
{
    private TRwReturn _rw_return_;
    private PBooleanExpression _boolean_expression_;
    private TSemicolon _semicolon_;

    public AReturnsomethingReturnStmnt ()
    {
    }

    public AReturnsomethingReturnStmnt (
            TRwReturn _rw_return_,
            PBooleanExpression _boolean_expression_,
            TSemicolon _semicolon_
    )
    {
        SetRwReturn (_rw_return_);
        SetBooleanExpression (_boolean_expression_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AReturnsomethingReturnStmnt (
            (TRwReturn)CloneNode (_rw_return_),
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAReturnsomethingReturnStmnt(this);
    }

    public TRwReturn GetRwReturn ()
    {
        return _rw_return_;
    }

    public void SetRwReturn (TRwReturn node)
    {
        if(_rw_return_ != null)
        {
            _rw_return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_return_ = node;
    }
    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_return_)
            + ToString (_boolean_expression_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_return_ == child )
        {
            _rw_return_ = null;
            return;
        }
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_return_ == oldChild )
        {
            SetRwReturn ((TRwReturn) newChild);
            return;
        }
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AReturnnothingReturnStmnt : PReturnStmnt
{
    private TRwReturn _rw_return_;
    private TSemicolon _semicolon_;

    public AReturnnothingReturnStmnt ()
    {
    }

    public AReturnnothingReturnStmnt (
            TRwReturn _rw_return_,
            TSemicolon _semicolon_
    )
    {
        SetRwReturn (_rw_return_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AReturnnothingReturnStmnt (
            (TRwReturn)CloneNode (_rw_return_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAReturnnothingReturnStmnt(this);
    }

    public TRwReturn GetRwReturn ()
    {
        return _rw_return_;
    }

    public void SetRwReturn (TRwReturn node)
    {
        if(_rw_return_ != null)
        {
            _rw_return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rw_return_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rw_return_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rw_return_ == child )
        {
            _rw_return_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rw_return_ == oldChild )
        {
            SetRwReturn ((TRwReturn) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PStatement
{
    private PIfStmnt _if_stmnt_;
    private PStatement _statement_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            PIfStmnt _if_stmnt_,
            PStatement _statement_
    )
    {
        SetIfStmnt (_if_stmnt_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (PIfStmnt)CloneNode (_if_stmnt_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public PIfStmnt GetIfStmnt ()
    {
        return _if_stmnt_;
    }

    public void SetIfStmnt (PIfStmnt node)
    {
        if(_if_stmnt_ != null)
        {
            _if_stmnt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_stmnt_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_stmnt_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_stmnt_ == child )
        {
            _if_stmnt_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_stmnt_ == oldChild )
        {
            SetIfStmnt ((PIfStmnt) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PStatement
{
    private PWhileStmnt _while_stmnt_;
    private PStatement _statement_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            PWhileStmnt _while_stmnt_,
            PStatement _statement_
    )
    {
        SetWhileStmnt (_while_stmnt_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (PWhileStmnt)CloneNode (_while_stmnt_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public PWhileStmnt GetWhileStmnt ()
    {
        return _while_stmnt_;
    }

    public void SetWhileStmnt (PWhileStmnt node)
    {
        if(_while_stmnt_ != null)
        {
            _while_stmnt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_stmnt_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_stmnt_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_stmnt_ == child )
        {
            _while_stmnt_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_stmnt_ == oldChild )
        {
            SetWhileStmnt ((PWhileStmnt) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AForStatement : PStatement
{
    private PForStmnt _for_stmnt_;
    private PStatement _statement_;

    public AForStatement ()
    {
    }

    public AForStatement (
            PForStmnt _for_stmnt_,
            PStatement _statement_
    )
    {
        SetForStmnt (_for_stmnt_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AForStatement (
            (PForStmnt)CloneNode (_for_stmnt_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForStatement(this);
    }

    public PForStmnt GetForStmnt ()
    {
        return _for_stmnt_;
    }

    public void SetForStmnt (PForStmnt node)
    {
        if(_for_stmnt_ != null)
        {
            _for_stmnt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _for_stmnt_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_for_stmnt_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _for_stmnt_ == child )
        {
            _for_stmnt_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _for_stmnt_ == oldChild )
        {
            SetForStmnt ((PForStmnt) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AFunccallStatement : PStatement
{
    private PFuncCall _func_call_;
    private PStatement _statement_;

    public AFunccallStatement ()
    {
    }

    public AFunccallStatement (
            PFuncCall _func_call_,
            PStatement _statement_
    )
    {
        SetFuncCall (_func_call_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AFunccallStatement (
            (PFuncCall)CloneNode (_func_call_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunccallStatement(this);
    }

    public PFuncCall GetFuncCall ()
    {
        return _func_call_;
    }

    public void SetFuncCall (PFuncCall node)
    {
        if(_func_call_ != null)
        {
            _func_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _func_call_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_func_call_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _func_call_ == child )
        {
            _func_call_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _func_call_ == oldChild )
        {
            SetFuncCall ((PFuncCall) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AReturnStatement : PStatement
{
    private PReturnStmnt _return_stmnt_;
    private PStatement _statement_;

    public AReturnStatement ()
    {
    }

    public AReturnStatement (
            PReturnStmnt _return_stmnt_,
            PStatement _statement_
    )
    {
        SetReturnStmnt (_return_stmnt_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AReturnStatement (
            (PReturnStmnt)CloneNode (_return_stmnt_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAReturnStatement(this);
    }

    public PReturnStmnt GetReturnStmnt ()
    {
        return _return_stmnt_;
    }

    public void SetReturnStmnt (PReturnStmnt node)
    {
        if(_return_stmnt_ != null)
        {
            _return_stmnt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_stmnt_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_return_stmnt_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _return_stmnt_ == child )
        {
            _return_stmnt_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _return_stmnt_ == oldChild )
        {
            SetReturnStmnt ((PReturnStmnt) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class ANoneStatement : PStatement
{


    public ANoneStatement (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneStatement (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneStatement(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOrBooleanExpression : PBooleanExpression
{
    private PBooleanExpression _boolean_expression_;
    private TBooleanOr _boolean_or_;
    private PBooleanExpression1 _boolean_expression1_;

    public AOrBooleanExpression ()
    {
    }

    public AOrBooleanExpression (
            PBooleanExpression _boolean_expression_,
            TBooleanOr _boolean_or_,
            PBooleanExpression1 _boolean_expression1_
    )
    {
        SetBooleanExpression (_boolean_expression_);
        SetBooleanOr (_boolean_or_);
        SetBooleanExpression1 (_boolean_expression1_);
    }

    public override Object Clone()
    {
        return new AOrBooleanExpression (
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TBooleanOr)CloneNode (_boolean_or_),
            (PBooleanExpression1)CloneNode (_boolean_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrBooleanExpression(this);
    }

    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TBooleanOr GetBooleanOr ()
    {
        return _boolean_or_;
    }

    public void SetBooleanOr (TBooleanOr node)
    {
        if(_boolean_or_ != null)
        {
            _boolean_or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_or_ = node;
    }
    public PBooleanExpression1 GetBooleanExpression1 ()
    {
        return _boolean_expression1_;
    }

    public void SetBooleanExpression1 (PBooleanExpression1 node)
    {
        if(_boolean_expression1_ != null)
        {
            _boolean_expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression_)
            + ToString (_boolean_or_)
            + ToString (_boolean_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _boolean_or_ == child )
        {
            _boolean_or_ = null;
            return;
        }
        if ( _boolean_expression1_ == child )
        {
            _boolean_expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _boolean_or_ == oldChild )
        {
            SetBooleanOr ((TBooleanOr) newChild);
            return;
        }
        if ( _boolean_expression1_ == oldChild )
        {
            SetBooleanExpression1 ((PBooleanExpression1) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression : PBooleanExpression
{
    private PBooleanExpression1 _boolean_expression1_;

    public ABooleanExpression ()
    {
    }

    public ABooleanExpression (
            PBooleanExpression1 _boolean_expression1_
    )
    {
        SetBooleanExpression1 (_boolean_expression1_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression (
            (PBooleanExpression1)CloneNode (_boolean_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression(this);
    }

    public PBooleanExpression1 GetBooleanExpression1 ()
    {
        return _boolean_expression1_;
    }

    public void SetBooleanExpression1 (PBooleanExpression1 node)
    {
        if(_boolean_expression1_ != null)
        {
            _boolean_expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression1_ == child )
        {
            _boolean_expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression1_ == oldChild )
        {
            SetBooleanExpression1 ((PBooleanExpression1) newChild);
            return;
        }
    }

}
public sealed class AAndBooleanExpression1 : PBooleanExpression1
{
    private PBooleanExpression1 _boolean_expression1_;
    private TBooleanAnd _boolean_and_;
    private PBooleanExpression2 _boolean_expression2_;

    public AAndBooleanExpression1 ()
    {
    }

    public AAndBooleanExpression1 (
            PBooleanExpression1 _boolean_expression1_,
            TBooleanAnd _boolean_and_,
            PBooleanExpression2 _boolean_expression2_
    )
    {
        SetBooleanExpression1 (_boolean_expression1_);
        SetBooleanAnd (_boolean_and_);
        SetBooleanExpression2 (_boolean_expression2_);
    }

    public override Object Clone()
    {
        return new AAndBooleanExpression1 (
            (PBooleanExpression1)CloneNode (_boolean_expression1_),
            (TBooleanAnd)CloneNode (_boolean_and_),
            (PBooleanExpression2)CloneNode (_boolean_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndBooleanExpression1(this);
    }

    public PBooleanExpression1 GetBooleanExpression1 ()
    {
        return _boolean_expression1_;
    }

    public void SetBooleanExpression1 (PBooleanExpression1 node)
    {
        if(_boolean_expression1_ != null)
        {
            _boolean_expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression1_ = node;
    }
    public TBooleanAnd GetBooleanAnd ()
    {
        return _boolean_and_;
    }

    public void SetBooleanAnd (TBooleanAnd node)
    {
        if(_boolean_and_ != null)
        {
            _boolean_and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_and_ = node;
    }
    public PBooleanExpression2 GetBooleanExpression2 ()
    {
        return _boolean_expression2_;
    }

    public void SetBooleanExpression2 (PBooleanExpression2 node)
    {
        if(_boolean_expression2_ != null)
        {
            _boolean_expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression1_)
            + ToString (_boolean_and_)
            + ToString (_boolean_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression1_ == child )
        {
            _boolean_expression1_ = null;
            return;
        }
        if ( _boolean_and_ == child )
        {
            _boolean_and_ = null;
            return;
        }
        if ( _boolean_expression2_ == child )
        {
            _boolean_expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression1_ == oldChild )
        {
            SetBooleanExpression1 ((PBooleanExpression1) newChild);
            return;
        }
        if ( _boolean_and_ == oldChild )
        {
            SetBooleanAnd ((TBooleanAnd) newChild);
            return;
        }
        if ( _boolean_expression2_ == oldChild )
        {
            SetBooleanExpression2 ((PBooleanExpression2) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression1 : PBooleanExpression1
{
    private PBooleanExpression2 _boolean_expression2_;

    public ABooleanExpression1 ()
    {
    }

    public ABooleanExpression1 (
            PBooleanExpression2 _boolean_expression2_
    )
    {
        SetBooleanExpression2 (_boolean_expression2_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression1 (
            (PBooleanExpression2)CloneNode (_boolean_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression1(this);
    }

    public PBooleanExpression2 GetBooleanExpression2 ()
    {
        return _boolean_expression2_;
    }

    public void SetBooleanExpression2 (PBooleanExpression2 node)
    {
        if(_boolean_expression2_ != null)
        {
            _boolean_expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression2_ == child )
        {
            _boolean_expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression2_ == oldChild )
        {
            SetBooleanExpression2 ((PBooleanExpression2) newChild);
            return;
        }
    }

}
public sealed class ACompareIsnotequalsBooleanExpression2 : PBooleanExpression2
{
    private PBooleanExpression2 _boolean_expression2_;
    private TBooleanCompareIsnotequals _boolean_compare_isnotequals_;
    private PBooleanExpression3 _boolean_expression3_;

    public ACompareIsnotequalsBooleanExpression2 ()
    {
    }

    public ACompareIsnotequalsBooleanExpression2 (
            PBooleanExpression2 _boolean_expression2_,
            TBooleanCompareIsnotequals _boolean_compare_isnotequals_,
            PBooleanExpression3 _boolean_expression3_
    )
    {
        SetBooleanExpression2 (_boolean_expression2_);
        SetBooleanCompareIsnotequals (_boolean_compare_isnotequals_);
        SetBooleanExpression3 (_boolean_expression3_);
    }

    public override Object Clone()
    {
        return new ACompareIsnotequalsBooleanExpression2 (
            (PBooleanExpression2)CloneNode (_boolean_expression2_),
            (TBooleanCompareIsnotequals)CloneNode (_boolean_compare_isnotequals_),
            (PBooleanExpression3)CloneNode (_boolean_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompareIsnotequalsBooleanExpression2(this);
    }

    public PBooleanExpression2 GetBooleanExpression2 ()
    {
        return _boolean_expression2_;
    }

    public void SetBooleanExpression2 (PBooleanExpression2 node)
    {
        if(_boolean_expression2_ != null)
        {
            _boolean_expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression2_ = node;
    }
    public TBooleanCompareIsnotequals GetBooleanCompareIsnotequals ()
    {
        return _boolean_compare_isnotequals_;
    }

    public void SetBooleanCompareIsnotequals (TBooleanCompareIsnotequals node)
    {
        if(_boolean_compare_isnotequals_ != null)
        {
            _boolean_compare_isnotequals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_compare_isnotequals_ = node;
    }
    public PBooleanExpression3 GetBooleanExpression3 ()
    {
        return _boolean_expression3_;
    }

    public void SetBooleanExpression3 (PBooleanExpression3 node)
    {
        if(_boolean_expression3_ != null)
        {
            _boolean_expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression2_)
            + ToString (_boolean_compare_isnotequals_)
            + ToString (_boolean_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression2_ == child )
        {
            _boolean_expression2_ = null;
            return;
        }
        if ( _boolean_compare_isnotequals_ == child )
        {
            _boolean_compare_isnotequals_ = null;
            return;
        }
        if ( _boolean_expression3_ == child )
        {
            _boolean_expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression2_ == oldChild )
        {
            SetBooleanExpression2 ((PBooleanExpression2) newChild);
            return;
        }
        if ( _boolean_compare_isnotequals_ == oldChild )
        {
            SetBooleanCompareIsnotequals ((TBooleanCompareIsnotequals) newChild);
            return;
        }
        if ( _boolean_expression3_ == oldChild )
        {
            SetBooleanExpression3 ((PBooleanExpression3) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression2 : PBooleanExpression2
{
    private PBooleanExpression3 _boolean_expression3_;

    public ABooleanExpression2 ()
    {
    }

    public ABooleanExpression2 (
            PBooleanExpression3 _boolean_expression3_
    )
    {
        SetBooleanExpression3 (_boolean_expression3_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression2 (
            (PBooleanExpression3)CloneNode (_boolean_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression2(this);
    }

    public PBooleanExpression3 GetBooleanExpression3 ()
    {
        return _boolean_expression3_;
    }

    public void SetBooleanExpression3 (PBooleanExpression3 node)
    {
        if(_boolean_expression3_ != null)
        {
            _boolean_expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression3_ == child )
        {
            _boolean_expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression3_ == oldChild )
        {
            SetBooleanExpression3 ((PBooleanExpression3) newChild);
            return;
        }
    }

}
public sealed class ACompareEqualsBooleanExpression3 : PBooleanExpression3
{
    private PBooleanExpression3 _boolean_expression3_;
    private TBooleanCompareEquals _boolean_compare_equals_;
    private PBooleanExpression4 _boolean_expression4_;

    public ACompareEqualsBooleanExpression3 ()
    {
    }

    public ACompareEqualsBooleanExpression3 (
            PBooleanExpression3 _boolean_expression3_,
            TBooleanCompareEquals _boolean_compare_equals_,
            PBooleanExpression4 _boolean_expression4_
    )
    {
        SetBooleanExpression3 (_boolean_expression3_);
        SetBooleanCompareEquals (_boolean_compare_equals_);
        SetBooleanExpression4 (_boolean_expression4_);
    }

    public override Object Clone()
    {
        return new ACompareEqualsBooleanExpression3 (
            (PBooleanExpression3)CloneNode (_boolean_expression3_),
            (TBooleanCompareEquals)CloneNode (_boolean_compare_equals_),
            (PBooleanExpression4)CloneNode (_boolean_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompareEqualsBooleanExpression3(this);
    }

    public PBooleanExpression3 GetBooleanExpression3 ()
    {
        return _boolean_expression3_;
    }

    public void SetBooleanExpression3 (PBooleanExpression3 node)
    {
        if(_boolean_expression3_ != null)
        {
            _boolean_expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression3_ = node;
    }
    public TBooleanCompareEquals GetBooleanCompareEquals ()
    {
        return _boolean_compare_equals_;
    }

    public void SetBooleanCompareEquals (TBooleanCompareEquals node)
    {
        if(_boolean_compare_equals_ != null)
        {
            _boolean_compare_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_compare_equals_ = node;
    }
    public PBooleanExpression4 GetBooleanExpression4 ()
    {
        return _boolean_expression4_;
    }

    public void SetBooleanExpression4 (PBooleanExpression4 node)
    {
        if(_boolean_expression4_ != null)
        {
            _boolean_expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression3_)
            + ToString (_boolean_compare_equals_)
            + ToString (_boolean_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression3_ == child )
        {
            _boolean_expression3_ = null;
            return;
        }
        if ( _boolean_compare_equals_ == child )
        {
            _boolean_compare_equals_ = null;
            return;
        }
        if ( _boolean_expression4_ == child )
        {
            _boolean_expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression3_ == oldChild )
        {
            SetBooleanExpression3 ((PBooleanExpression3) newChild);
            return;
        }
        if ( _boolean_compare_equals_ == oldChild )
        {
            SetBooleanCompareEquals ((TBooleanCompareEquals) newChild);
            return;
        }
        if ( _boolean_expression4_ == oldChild )
        {
            SetBooleanExpression4 ((PBooleanExpression4) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression3 : PBooleanExpression3
{
    private PBooleanExpression4 _boolean_expression4_;

    public ABooleanExpression3 ()
    {
    }

    public ABooleanExpression3 (
            PBooleanExpression4 _boolean_expression4_
    )
    {
        SetBooleanExpression4 (_boolean_expression4_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression3 (
            (PBooleanExpression4)CloneNode (_boolean_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression3(this);
    }

    public PBooleanExpression4 GetBooleanExpression4 ()
    {
        return _boolean_expression4_;
    }

    public void SetBooleanExpression4 (PBooleanExpression4 node)
    {
        if(_boolean_expression4_ != null)
        {
            _boolean_expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression4_ == child )
        {
            _boolean_expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression4_ == oldChild )
        {
            SetBooleanExpression4 ((PBooleanExpression4) newChild);
            return;
        }
    }

}
public sealed class AGreaterEqualsBooleanExpression4 : PBooleanExpression4
{
    private PBooleanExpression4 _boolean_expression4_;
    private TBooleanGreaterEquals _boolean_greater_equals_;
    private PBooleanExpression5 _boolean_expression5_;

    public AGreaterEqualsBooleanExpression4 ()
    {
    }

    public AGreaterEqualsBooleanExpression4 (
            PBooleanExpression4 _boolean_expression4_,
            TBooleanGreaterEquals _boolean_greater_equals_,
            PBooleanExpression5 _boolean_expression5_
    )
    {
        SetBooleanExpression4 (_boolean_expression4_);
        SetBooleanGreaterEquals (_boolean_greater_equals_);
        SetBooleanExpression5 (_boolean_expression5_);
    }

    public override Object Clone()
    {
        return new AGreaterEqualsBooleanExpression4 (
            (PBooleanExpression4)CloneNode (_boolean_expression4_),
            (TBooleanGreaterEquals)CloneNode (_boolean_greater_equals_),
            (PBooleanExpression5)CloneNode (_boolean_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterEqualsBooleanExpression4(this);
    }

    public PBooleanExpression4 GetBooleanExpression4 ()
    {
        return _boolean_expression4_;
    }

    public void SetBooleanExpression4 (PBooleanExpression4 node)
    {
        if(_boolean_expression4_ != null)
        {
            _boolean_expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression4_ = node;
    }
    public TBooleanGreaterEquals GetBooleanGreaterEquals ()
    {
        return _boolean_greater_equals_;
    }

    public void SetBooleanGreaterEquals (TBooleanGreaterEquals node)
    {
        if(_boolean_greater_equals_ != null)
        {
            _boolean_greater_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_greater_equals_ = node;
    }
    public PBooleanExpression5 GetBooleanExpression5 ()
    {
        return _boolean_expression5_;
    }

    public void SetBooleanExpression5 (PBooleanExpression5 node)
    {
        if(_boolean_expression5_ != null)
        {
            _boolean_expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression4_)
            + ToString (_boolean_greater_equals_)
            + ToString (_boolean_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression4_ == child )
        {
            _boolean_expression4_ = null;
            return;
        }
        if ( _boolean_greater_equals_ == child )
        {
            _boolean_greater_equals_ = null;
            return;
        }
        if ( _boolean_expression5_ == child )
        {
            _boolean_expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression4_ == oldChild )
        {
            SetBooleanExpression4 ((PBooleanExpression4) newChild);
            return;
        }
        if ( _boolean_greater_equals_ == oldChild )
        {
            SetBooleanGreaterEquals ((TBooleanGreaterEquals) newChild);
            return;
        }
        if ( _boolean_expression5_ == oldChild )
        {
            SetBooleanExpression5 ((PBooleanExpression5) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression4 : PBooleanExpression4
{
    private PBooleanExpression5 _boolean_expression5_;

    public ABooleanExpression4 ()
    {
    }

    public ABooleanExpression4 (
            PBooleanExpression5 _boolean_expression5_
    )
    {
        SetBooleanExpression5 (_boolean_expression5_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression4 (
            (PBooleanExpression5)CloneNode (_boolean_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression4(this);
    }

    public PBooleanExpression5 GetBooleanExpression5 ()
    {
        return _boolean_expression5_;
    }

    public void SetBooleanExpression5 (PBooleanExpression5 node)
    {
        if(_boolean_expression5_ != null)
        {
            _boolean_expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression5_ == child )
        {
            _boolean_expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression5_ == oldChild )
        {
            SetBooleanExpression5 ((PBooleanExpression5) newChild);
            return;
        }
    }

}
public sealed class ALesserEqualsBooleanExpression5 : PBooleanExpression5
{
    private PBooleanExpression5 _boolean_expression5_;
    private TBooleanLesserEquals _boolean_lesser_equals_;
    private PBooleanExpression6 _boolean_expression6_;

    public ALesserEqualsBooleanExpression5 ()
    {
    }

    public ALesserEqualsBooleanExpression5 (
            PBooleanExpression5 _boolean_expression5_,
            TBooleanLesserEquals _boolean_lesser_equals_,
            PBooleanExpression6 _boolean_expression6_
    )
    {
        SetBooleanExpression5 (_boolean_expression5_);
        SetBooleanLesserEquals (_boolean_lesser_equals_);
        SetBooleanExpression6 (_boolean_expression6_);
    }

    public override Object Clone()
    {
        return new ALesserEqualsBooleanExpression5 (
            (PBooleanExpression5)CloneNode (_boolean_expression5_),
            (TBooleanLesserEquals)CloneNode (_boolean_lesser_equals_),
            (PBooleanExpression6)CloneNode (_boolean_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALesserEqualsBooleanExpression5(this);
    }

    public PBooleanExpression5 GetBooleanExpression5 ()
    {
        return _boolean_expression5_;
    }

    public void SetBooleanExpression5 (PBooleanExpression5 node)
    {
        if(_boolean_expression5_ != null)
        {
            _boolean_expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression5_ = node;
    }
    public TBooleanLesserEquals GetBooleanLesserEquals ()
    {
        return _boolean_lesser_equals_;
    }

    public void SetBooleanLesserEquals (TBooleanLesserEquals node)
    {
        if(_boolean_lesser_equals_ != null)
        {
            _boolean_lesser_equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_lesser_equals_ = node;
    }
    public PBooleanExpression6 GetBooleanExpression6 ()
    {
        return _boolean_expression6_;
    }

    public void SetBooleanExpression6 (PBooleanExpression6 node)
    {
        if(_boolean_expression6_ != null)
        {
            _boolean_expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression5_)
            + ToString (_boolean_lesser_equals_)
            + ToString (_boolean_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression5_ == child )
        {
            _boolean_expression5_ = null;
            return;
        }
        if ( _boolean_lesser_equals_ == child )
        {
            _boolean_lesser_equals_ = null;
            return;
        }
        if ( _boolean_expression6_ == child )
        {
            _boolean_expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression5_ == oldChild )
        {
            SetBooleanExpression5 ((PBooleanExpression5) newChild);
            return;
        }
        if ( _boolean_lesser_equals_ == oldChild )
        {
            SetBooleanLesserEquals ((TBooleanLesserEquals) newChild);
            return;
        }
        if ( _boolean_expression6_ == oldChild )
        {
            SetBooleanExpression6 ((PBooleanExpression6) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression5 : PBooleanExpression5
{
    private PBooleanExpression6 _boolean_expression6_;

    public ABooleanExpression5 ()
    {
    }

    public ABooleanExpression5 (
            PBooleanExpression6 _boolean_expression6_
    )
    {
        SetBooleanExpression6 (_boolean_expression6_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression5 (
            (PBooleanExpression6)CloneNode (_boolean_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression5(this);
    }

    public PBooleanExpression6 GetBooleanExpression6 ()
    {
        return _boolean_expression6_;
    }

    public void SetBooleanExpression6 (PBooleanExpression6 node)
    {
        if(_boolean_expression6_ != null)
        {
            _boolean_expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression6_ == child )
        {
            _boolean_expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression6_ == oldChild )
        {
            SetBooleanExpression6 ((PBooleanExpression6) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanBooleanExpression6 : PBooleanExpression6
{
    private PBooleanExpression6 _boolean_expression6_;
    private TBooleanGreaterThan _boolean_greater_than_;
    private PBooleanExpression7 _boolean_expression7_;

    public AGreaterThanBooleanExpression6 ()
    {
    }

    public AGreaterThanBooleanExpression6 (
            PBooleanExpression6 _boolean_expression6_,
            TBooleanGreaterThan _boolean_greater_than_,
            PBooleanExpression7 _boolean_expression7_
    )
    {
        SetBooleanExpression6 (_boolean_expression6_);
        SetBooleanGreaterThan (_boolean_greater_than_);
        SetBooleanExpression7 (_boolean_expression7_);
    }

    public override Object Clone()
    {
        return new AGreaterThanBooleanExpression6 (
            (PBooleanExpression6)CloneNode (_boolean_expression6_),
            (TBooleanGreaterThan)CloneNode (_boolean_greater_than_),
            (PBooleanExpression7)CloneNode (_boolean_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanBooleanExpression6(this);
    }

    public PBooleanExpression6 GetBooleanExpression6 ()
    {
        return _boolean_expression6_;
    }

    public void SetBooleanExpression6 (PBooleanExpression6 node)
    {
        if(_boolean_expression6_ != null)
        {
            _boolean_expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression6_ = node;
    }
    public TBooleanGreaterThan GetBooleanGreaterThan ()
    {
        return _boolean_greater_than_;
    }

    public void SetBooleanGreaterThan (TBooleanGreaterThan node)
    {
        if(_boolean_greater_than_ != null)
        {
            _boolean_greater_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_greater_than_ = node;
    }
    public PBooleanExpression7 GetBooleanExpression7 ()
    {
        return _boolean_expression7_;
    }

    public void SetBooleanExpression7 (PBooleanExpression7 node)
    {
        if(_boolean_expression7_ != null)
        {
            _boolean_expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression6_)
            + ToString (_boolean_greater_than_)
            + ToString (_boolean_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression6_ == child )
        {
            _boolean_expression6_ = null;
            return;
        }
        if ( _boolean_greater_than_ == child )
        {
            _boolean_greater_than_ = null;
            return;
        }
        if ( _boolean_expression7_ == child )
        {
            _boolean_expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression6_ == oldChild )
        {
            SetBooleanExpression6 ((PBooleanExpression6) newChild);
            return;
        }
        if ( _boolean_greater_than_ == oldChild )
        {
            SetBooleanGreaterThan ((TBooleanGreaterThan) newChild);
            return;
        }
        if ( _boolean_expression7_ == oldChild )
        {
            SetBooleanExpression7 ((PBooleanExpression7) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression6 : PBooleanExpression6
{
    private PBooleanExpression7 _boolean_expression7_;

    public ABooleanExpression6 ()
    {
    }

    public ABooleanExpression6 (
            PBooleanExpression7 _boolean_expression7_
    )
    {
        SetBooleanExpression7 (_boolean_expression7_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression6 (
            (PBooleanExpression7)CloneNode (_boolean_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression6(this);
    }

    public PBooleanExpression7 GetBooleanExpression7 ()
    {
        return _boolean_expression7_;
    }

    public void SetBooleanExpression7 (PBooleanExpression7 node)
    {
        if(_boolean_expression7_ != null)
        {
            _boolean_expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression7_ == child )
        {
            _boolean_expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression7_ == oldChild )
        {
            SetBooleanExpression7 ((PBooleanExpression7) newChild);
            return;
        }
    }

}
public sealed class ALesserThanBooleanExpression7 : PBooleanExpression7
{
    private PBooleanExpression7 _boolean_expression7_;
    private TBooleanLesserThan _boolean_lesser_than_;
    private PMathExpression _math_expression_;

    public ALesserThanBooleanExpression7 ()
    {
    }

    public ALesserThanBooleanExpression7 (
            PBooleanExpression7 _boolean_expression7_,
            TBooleanLesserThan _boolean_lesser_than_,
            PMathExpression _math_expression_
    )
    {
        SetBooleanExpression7 (_boolean_expression7_);
        SetBooleanLesserThan (_boolean_lesser_than_);
        SetMathExpression (_math_expression_);
    }

    public override Object Clone()
    {
        return new ALesserThanBooleanExpression7 (
            (PBooleanExpression7)CloneNode (_boolean_expression7_),
            (TBooleanLesserThan)CloneNode (_boolean_lesser_than_),
            (PMathExpression)CloneNode (_math_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALesserThanBooleanExpression7(this);
    }

    public PBooleanExpression7 GetBooleanExpression7 ()
    {
        return _boolean_expression7_;
    }

    public void SetBooleanExpression7 (PBooleanExpression7 node)
    {
        if(_boolean_expression7_ != null)
        {
            _boolean_expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression7_ = node;
    }
    public TBooleanLesserThan GetBooleanLesserThan ()
    {
        return _boolean_lesser_than_;
    }

    public void SetBooleanLesserThan (TBooleanLesserThan node)
    {
        if(_boolean_lesser_than_ != null)
        {
            _boolean_lesser_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_lesser_than_ = node;
    }
    public PMathExpression GetMathExpression ()
    {
        return _math_expression_;
    }

    public void SetMathExpression (PMathExpression node)
    {
        if(_math_expression_ != null)
        {
            _math_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_expression7_)
            + ToString (_boolean_lesser_than_)
            + ToString (_math_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_expression7_ == child )
        {
            _boolean_expression7_ = null;
            return;
        }
        if ( _boolean_lesser_than_ == child )
        {
            _boolean_lesser_than_ = null;
            return;
        }
        if ( _math_expression_ == child )
        {
            _math_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_expression7_ == oldChild )
        {
            SetBooleanExpression7 ((PBooleanExpression7) newChild);
            return;
        }
        if ( _boolean_lesser_than_ == oldChild )
        {
            SetBooleanLesserThan ((TBooleanLesserThan) newChild);
            return;
        }
        if ( _math_expression_ == oldChild )
        {
            SetMathExpression ((PMathExpression) newChild);
            return;
        }
    }

}
public sealed class ABooleanExpression7 : PBooleanExpression7
{
    private PMathExpression _math_expression_;

    public ABooleanExpression7 ()
    {
    }

    public ABooleanExpression7 (
            PMathExpression _math_expression_
    )
    {
        SetMathExpression (_math_expression_);
    }

    public override Object Clone()
    {
        return new ABooleanExpression7 (
            (PMathExpression)CloneNode (_math_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanExpression7(this);
    }

    public PMathExpression GetMathExpression ()
    {
        return _math_expression_;
    }

    public void SetMathExpression (PMathExpression node)
    {
        if(_math_expression_ != null)
        {
            _math_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression_ == child )
        {
            _math_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression_ == oldChild )
        {
            SetMathExpression ((PMathExpression) newChild);
            return;
        }
    }

}
public sealed class AExpsubtractMathExpression : PMathExpression
{
    private PMathExpression _math_expression_;
    private TOpSubtract _op_subtract_;
    private PMathExpression1 _math_expression1_;

    public AExpsubtractMathExpression ()
    {
    }

    public AExpsubtractMathExpression (
            PMathExpression _math_expression_,
            TOpSubtract _op_subtract_,
            PMathExpression1 _math_expression1_
    )
    {
        SetMathExpression (_math_expression_);
        SetOpSubtract (_op_subtract_);
        SetMathExpression1 (_math_expression1_);
    }

    public override Object Clone()
    {
        return new AExpsubtractMathExpression (
            (PMathExpression)CloneNode (_math_expression_),
            (TOpSubtract)CloneNode (_op_subtract_),
            (PMathExpression1)CloneNode (_math_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpsubtractMathExpression(this);
    }

    public PMathExpression GetMathExpression ()
    {
        return _math_expression_;
    }

    public void SetMathExpression (PMathExpression node)
    {
        if(_math_expression_ != null)
        {
            _math_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression_ = node;
    }
    public TOpSubtract GetOpSubtract ()
    {
        return _op_subtract_;
    }

    public void SetOpSubtract (TOpSubtract node)
    {
        if(_op_subtract_ != null)
        {
            _op_subtract_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _op_subtract_ = node;
    }
    public PMathExpression1 GetMathExpression1 ()
    {
        return _math_expression1_;
    }

    public void SetMathExpression1 (PMathExpression1 node)
    {
        if(_math_expression1_ != null)
        {
            _math_expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression_)
            + ToString (_op_subtract_)
            + ToString (_math_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression_ == child )
        {
            _math_expression_ = null;
            return;
        }
        if ( _op_subtract_ == child )
        {
            _op_subtract_ = null;
            return;
        }
        if ( _math_expression1_ == child )
        {
            _math_expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression_ == oldChild )
        {
            SetMathExpression ((PMathExpression) newChild);
            return;
        }
        if ( _op_subtract_ == oldChild )
        {
            SetOpSubtract ((TOpSubtract) newChild);
            return;
        }
        if ( _math_expression1_ == oldChild )
        {
            SetMathExpression1 ((PMathExpression1) newChild);
            return;
        }
    }

}
public sealed class AMathExpression : PMathExpression
{
    private PMathExpression1 _math_expression1_;

    public AMathExpression ()
    {
    }

    public AMathExpression (
            PMathExpression1 _math_expression1_
    )
    {
        SetMathExpression1 (_math_expression1_);
    }

    public override Object Clone()
    {
        return new AMathExpression (
            (PMathExpression1)CloneNode (_math_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression(this);
    }

    public PMathExpression1 GetMathExpression1 ()
    {
        return _math_expression1_;
    }

    public void SetMathExpression1 (PMathExpression1 node)
    {
        if(_math_expression1_ != null)
        {
            _math_expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression1_ == child )
        {
            _math_expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression1_ == oldChild )
        {
            SetMathExpression1 ((PMathExpression1) newChild);
            return;
        }
    }

}
public sealed class AExpaddMathExpression1 : PMathExpression1
{
    private PMathExpression1 _math_expression1_;
    private TOpAdd _op_add_;
    private PMathExpression2 _math_expression2_;

    public AExpaddMathExpression1 ()
    {
    }

    public AExpaddMathExpression1 (
            PMathExpression1 _math_expression1_,
            TOpAdd _op_add_,
            PMathExpression2 _math_expression2_
    )
    {
        SetMathExpression1 (_math_expression1_);
        SetOpAdd (_op_add_);
        SetMathExpression2 (_math_expression2_);
    }

    public override Object Clone()
    {
        return new AExpaddMathExpression1 (
            (PMathExpression1)CloneNode (_math_expression1_),
            (TOpAdd)CloneNode (_op_add_),
            (PMathExpression2)CloneNode (_math_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpaddMathExpression1(this);
    }

    public PMathExpression1 GetMathExpression1 ()
    {
        return _math_expression1_;
    }

    public void SetMathExpression1 (PMathExpression1 node)
    {
        if(_math_expression1_ != null)
        {
            _math_expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression1_ = node;
    }
    public TOpAdd GetOpAdd ()
    {
        return _op_add_;
    }

    public void SetOpAdd (TOpAdd node)
    {
        if(_op_add_ != null)
        {
            _op_add_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _op_add_ = node;
    }
    public PMathExpression2 GetMathExpression2 ()
    {
        return _math_expression2_;
    }

    public void SetMathExpression2 (PMathExpression2 node)
    {
        if(_math_expression2_ != null)
        {
            _math_expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression1_)
            + ToString (_op_add_)
            + ToString (_math_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression1_ == child )
        {
            _math_expression1_ = null;
            return;
        }
        if ( _op_add_ == child )
        {
            _op_add_ = null;
            return;
        }
        if ( _math_expression2_ == child )
        {
            _math_expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression1_ == oldChild )
        {
            SetMathExpression1 ((PMathExpression1) newChild);
            return;
        }
        if ( _op_add_ == oldChild )
        {
            SetOpAdd ((TOpAdd) newChild);
            return;
        }
        if ( _math_expression2_ == oldChild )
        {
            SetMathExpression2 ((PMathExpression2) newChild);
            return;
        }
    }

}
public sealed class AMathExpression1 : PMathExpression1
{
    private PMathExpression2 _math_expression2_;

    public AMathExpression1 ()
    {
    }

    public AMathExpression1 (
            PMathExpression2 _math_expression2_
    )
    {
        SetMathExpression2 (_math_expression2_);
    }

    public override Object Clone()
    {
        return new AMathExpression1 (
            (PMathExpression2)CloneNode (_math_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression1(this);
    }

    public PMathExpression2 GetMathExpression2 ()
    {
        return _math_expression2_;
    }

    public void SetMathExpression2 (PMathExpression2 node)
    {
        if(_math_expression2_ != null)
        {
            _math_expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression2_ == child )
        {
            _math_expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression2_ == oldChild )
        {
            SetMathExpression2 ((PMathExpression2) newChild);
            return;
        }
    }

}
public sealed class AExpmodMathExpression2 : PMathExpression2
{
    private PMathExpression2 _math_expression2_;
    private TOpMod _op_mod_;
    private PMathExpression3 _math_expression3_;

    public AExpmodMathExpression2 ()
    {
    }

    public AExpmodMathExpression2 (
            PMathExpression2 _math_expression2_,
            TOpMod _op_mod_,
            PMathExpression3 _math_expression3_
    )
    {
        SetMathExpression2 (_math_expression2_);
        SetOpMod (_op_mod_);
        SetMathExpression3 (_math_expression3_);
    }

    public override Object Clone()
    {
        return new AExpmodMathExpression2 (
            (PMathExpression2)CloneNode (_math_expression2_),
            (TOpMod)CloneNode (_op_mod_),
            (PMathExpression3)CloneNode (_math_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpmodMathExpression2(this);
    }

    public PMathExpression2 GetMathExpression2 ()
    {
        return _math_expression2_;
    }

    public void SetMathExpression2 (PMathExpression2 node)
    {
        if(_math_expression2_ != null)
        {
            _math_expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression2_ = node;
    }
    public TOpMod GetOpMod ()
    {
        return _op_mod_;
    }

    public void SetOpMod (TOpMod node)
    {
        if(_op_mod_ != null)
        {
            _op_mod_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _op_mod_ = node;
    }
    public PMathExpression3 GetMathExpression3 ()
    {
        return _math_expression3_;
    }

    public void SetMathExpression3 (PMathExpression3 node)
    {
        if(_math_expression3_ != null)
        {
            _math_expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression2_)
            + ToString (_op_mod_)
            + ToString (_math_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression2_ == child )
        {
            _math_expression2_ = null;
            return;
        }
        if ( _op_mod_ == child )
        {
            _op_mod_ = null;
            return;
        }
        if ( _math_expression3_ == child )
        {
            _math_expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression2_ == oldChild )
        {
            SetMathExpression2 ((PMathExpression2) newChild);
            return;
        }
        if ( _op_mod_ == oldChild )
        {
            SetOpMod ((TOpMod) newChild);
            return;
        }
        if ( _math_expression3_ == oldChild )
        {
            SetMathExpression3 ((PMathExpression3) newChild);
            return;
        }
    }

}
public sealed class AMathExpression2 : PMathExpression2
{
    private PMathExpression3 _math_expression3_;

    public AMathExpression2 ()
    {
    }

    public AMathExpression2 (
            PMathExpression3 _math_expression3_
    )
    {
        SetMathExpression3 (_math_expression3_);
    }

    public override Object Clone()
    {
        return new AMathExpression2 (
            (PMathExpression3)CloneNode (_math_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression2(this);
    }

    public PMathExpression3 GetMathExpression3 ()
    {
        return _math_expression3_;
    }

    public void SetMathExpression3 (PMathExpression3 node)
    {
        if(_math_expression3_ != null)
        {
            _math_expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression3_ == child )
        {
            _math_expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression3_ == oldChild )
        {
            SetMathExpression3 ((PMathExpression3) newChild);
            return;
        }
    }

}
public sealed class AExpdivideMathExpression3 : PMathExpression3
{
    private PMathExpression3 _math_expression3_;
    private TOpDivide _op_divide_;
    private PMathExpression4 _math_expression4_;

    public AExpdivideMathExpression3 ()
    {
    }

    public AExpdivideMathExpression3 (
            PMathExpression3 _math_expression3_,
            TOpDivide _op_divide_,
            PMathExpression4 _math_expression4_
    )
    {
        SetMathExpression3 (_math_expression3_);
        SetOpDivide (_op_divide_);
        SetMathExpression4 (_math_expression4_);
    }

    public override Object Clone()
    {
        return new AExpdivideMathExpression3 (
            (PMathExpression3)CloneNode (_math_expression3_),
            (TOpDivide)CloneNode (_op_divide_),
            (PMathExpression4)CloneNode (_math_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpdivideMathExpression3(this);
    }

    public PMathExpression3 GetMathExpression3 ()
    {
        return _math_expression3_;
    }

    public void SetMathExpression3 (PMathExpression3 node)
    {
        if(_math_expression3_ != null)
        {
            _math_expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression3_ = node;
    }
    public TOpDivide GetOpDivide ()
    {
        return _op_divide_;
    }

    public void SetOpDivide (TOpDivide node)
    {
        if(_op_divide_ != null)
        {
            _op_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _op_divide_ = node;
    }
    public PMathExpression4 GetMathExpression4 ()
    {
        return _math_expression4_;
    }

    public void SetMathExpression4 (PMathExpression4 node)
    {
        if(_math_expression4_ != null)
        {
            _math_expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression3_)
            + ToString (_op_divide_)
            + ToString (_math_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression3_ == child )
        {
            _math_expression3_ = null;
            return;
        }
        if ( _op_divide_ == child )
        {
            _op_divide_ = null;
            return;
        }
        if ( _math_expression4_ == child )
        {
            _math_expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression3_ == oldChild )
        {
            SetMathExpression3 ((PMathExpression3) newChild);
            return;
        }
        if ( _op_divide_ == oldChild )
        {
            SetOpDivide ((TOpDivide) newChild);
            return;
        }
        if ( _math_expression4_ == oldChild )
        {
            SetMathExpression4 ((PMathExpression4) newChild);
            return;
        }
    }

}
public sealed class AMathExpression3 : PMathExpression3
{
    private PMathExpression4 _math_expression4_;

    public AMathExpression3 ()
    {
    }

    public AMathExpression3 (
            PMathExpression4 _math_expression4_
    )
    {
        SetMathExpression4 (_math_expression4_);
    }

    public override Object Clone()
    {
        return new AMathExpression3 (
            (PMathExpression4)CloneNode (_math_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression3(this);
    }

    public PMathExpression4 GetMathExpression4 ()
    {
        return _math_expression4_;
    }

    public void SetMathExpression4 (PMathExpression4 node)
    {
        if(_math_expression4_ != null)
        {
            _math_expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression4_ == child )
        {
            _math_expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression4_ == oldChild )
        {
            SetMathExpression4 ((PMathExpression4) newChild);
            return;
        }
    }

}
public sealed class AExpmultiplyMathExpression4 : PMathExpression4
{
    private PMathExpression4 _math_expression4_;
    private TOpMultiply _op_multiply_;
    private PMathExpression5 _math_expression5_;

    public AExpmultiplyMathExpression4 ()
    {
    }

    public AExpmultiplyMathExpression4 (
            PMathExpression4 _math_expression4_,
            TOpMultiply _op_multiply_,
            PMathExpression5 _math_expression5_
    )
    {
        SetMathExpression4 (_math_expression4_);
        SetOpMultiply (_op_multiply_);
        SetMathExpression5 (_math_expression5_);
    }

    public override Object Clone()
    {
        return new AExpmultiplyMathExpression4 (
            (PMathExpression4)CloneNode (_math_expression4_),
            (TOpMultiply)CloneNode (_op_multiply_),
            (PMathExpression5)CloneNode (_math_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpmultiplyMathExpression4(this);
    }

    public PMathExpression4 GetMathExpression4 ()
    {
        return _math_expression4_;
    }

    public void SetMathExpression4 (PMathExpression4 node)
    {
        if(_math_expression4_ != null)
        {
            _math_expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression4_ = node;
    }
    public TOpMultiply GetOpMultiply ()
    {
        return _op_multiply_;
    }

    public void SetOpMultiply (TOpMultiply node)
    {
        if(_op_multiply_ != null)
        {
            _op_multiply_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _op_multiply_ = node;
    }
    public PMathExpression5 GetMathExpression5 ()
    {
        return _math_expression5_;
    }

    public void SetMathExpression5 (PMathExpression5 node)
    {
        if(_math_expression5_ != null)
        {
            _math_expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression4_)
            + ToString (_op_multiply_)
            + ToString (_math_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression4_ == child )
        {
            _math_expression4_ = null;
            return;
        }
        if ( _op_multiply_ == child )
        {
            _op_multiply_ = null;
            return;
        }
        if ( _math_expression5_ == child )
        {
            _math_expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression4_ == oldChild )
        {
            SetMathExpression4 ((PMathExpression4) newChild);
            return;
        }
        if ( _op_multiply_ == oldChild )
        {
            SetOpMultiply ((TOpMultiply) newChild);
            return;
        }
        if ( _math_expression5_ == oldChild )
        {
            SetMathExpression5 ((PMathExpression5) newChild);
            return;
        }
    }

}
public sealed class AMathExpression4 : PMathExpression4
{
    private PMathExpression5 _math_expression5_;

    public AMathExpression4 ()
    {
    }

    public AMathExpression4 (
            PMathExpression5 _math_expression5_
    )
    {
        SetMathExpression5 (_math_expression5_);
    }

    public override Object Clone()
    {
        return new AMathExpression4 (
            (PMathExpression5)CloneNode (_math_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression4(this);
    }

    public PMathExpression5 GetMathExpression5 ()
    {
        return _math_expression5_;
    }

    public void SetMathExpression5 (PMathExpression5 node)
    {
        if(_math_expression5_ != null)
        {
            _math_expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression5_ == child )
        {
            _math_expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression5_ == oldChild )
        {
            SetMathExpression5 ((PMathExpression5) newChild);
            return;
        }
    }

}
public sealed class AUnaryNotMathExpression5 : PMathExpression5
{
    private TUnaryNot _unary_not_;
    private PMathExpression6 _math_expression6_;

    public AUnaryNotMathExpression5 ()
    {
    }

    public AUnaryNotMathExpression5 (
            TUnaryNot _unary_not_,
            PMathExpression6 _math_expression6_
    )
    {
        SetUnaryNot (_unary_not_);
        SetMathExpression6 (_math_expression6_);
    }

    public override Object Clone()
    {
        return new AUnaryNotMathExpression5 (
            (TUnaryNot)CloneNode (_unary_not_),
            (PMathExpression6)CloneNode (_math_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnaryNotMathExpression5(this);
    }

    public TUnaryNot GetUnaryNot ()
    {
        return _unary_not_;
    }

    public void SetUnaryNot (TUnaryNot node)
    {
        if(_unary_not_ != null)
        {
            _unary_not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _unary_not_ = node;
    }
    public PMathExpression6 GetMathExpression6 ()
    {
        return _math_expression6_;
    }

    public void SetMathExpression6 (PMathExpression6 node)
    {
        if(_math_expression6_ != null)
        {
            _math_expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_unary_not_)
            + ToString (_math_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _unary_not_ == child )
        {
            _unary_not_ = null;
            return;
        }
        if ( _math_expression6_ == child )
        {
            _math_expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _unary_not_ == oldChild )
        {
            SetUnaryNot ((TUnaryNot) newChild);
            return;
        }
        if ( _math_expression6_ == oldChild )
        {
            SetMathExpression6 ((PMathExpression6) newChild);
            return;
        }
    }

}
public sealed class AMathExpression5 : PMathExpression5
{
    private PMathExpression6 _math_expression6_;

    public AMathExpression5 ()
    {
    }

    public AMathExpression5 (
            PMathExpression6 _math_expression6_
    )
    {
        SetMathExpression6 (_math_expression6_);
    }

    public override Object Clone()
    {
        return new AMathExpression5 (
            (PMathExpression6)CloneNode (_math_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression5(this);
    }

    public PMathExpression6 GetMathExpression6 ()
    {
        return _math_expression6_;
    }

    public void SetMathExpression6 (PMathExpression6 node)
    {
        if(_math_expression6_ != null)
        {
            _math_expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression6_ == child )
        {
            _math_expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression6_ == oldChild )
        {
            SetMathExpression6 ((PMathExpression6) newChild);
            return;
        }
    }

}
public sealed class AUnaryNegativeMathExpression6 : PMathExpression6
{
    private TOpSubtract _op_subtract_;
    private PMathExpression7 _math_expression7_;

    public AUnaryNegativeMathExpression6 ()
    {
    }

    public AUnaryNegativeMathExpression6 (
            TOpSubtract _op_subtract_,
            PMathExpression7 _math_expression7_
    )
    {
        SetOpSubtract (_op_subtract_);
        SetMathExpression7 (_math_expression7_);
    }

    public override Object Clone()
    {
        return new AUnaryNegativeMathExpression6 (
            (TOpSubtract)CloneNode (_op_subtract_),
            (PMathExpression7)CloneNode (_math_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnaryNegativeMathExpression6(this);
    }

    public TOpSubtract GetOpSubtract ()
    {
        return _op_subtract_;
    }

    public void SetOpSubtract (TOpSubtract node)
    {
        if(_op_subtract_ != null)
        {
            _op_subtract_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _op_subtract_ = node;
    }
    public PMathExpression7 GetMathExpression7 ()
    {
        return _math_expression7_;
    }

    public void SetMathExpression7 (PMathExpression7 node)
    {
        if(_math_expression7_ != null)
        {
            _math_expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_op_subtract_)
            + ToString (_math_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _op_subtract_ == child )
        {
            _op_subtract_ = null;
            return;
        }
        if ( _math_expression7_ == child )
        {
            _math_expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _op_subtract_ == oldChild )
        {
            SetOpSubtract ((TOpSubtract) newChild);
            return;
        }
        if ( _math_expression7_ == oldChild )
        {
            SetMathExpression7 ((PMathExpression7) newChild);
            return;
        }
    }

}
public sealed class AMathExpression6 : PMathExpression6
{
    private PMathExpression7 _math_expression7_;

    public AMathExpression6 ()
    {
    }

    public AMathExpression6 (
            PMathExpression7 _math_expression7_
    )
    {
        SetMathExpression7 (_math_expression7_);
    }

    public override Object Clone()
    {
        return new AMathExpression6 (
            (PMathExpression7)CloneNode (_math_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression6(this);
    }

    public PMathExpression7 GetMathExpression7 ()
    {
        return _math_expression7_;
    }

    public void SetMathExpression7 (PMathExpression7 node)
    {
        if(_math_expression7_ != null)
        {
            _math_expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression7_ == child )
        {
            _math_expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression7_ == oldChild )
        {
            SetMathExpression7 ((PMathExpression7) newChild);
            return;
        }
    }

}
public sealed class APostfixSubtractMathExpression7 : PMathExpression7
{
    private PMathExpression7 _math_expression7_;
    private TPostfixSubtract _postfix_subtract_;
    private PMathExpression8 _math_expression8_;

    public APostfixSubtractMathExpression7 ()
    {
    }

    public APostfixSubtractMathExpression7 (
            PMathExpression7 _math_expression7_,
            TPostfixSubtract _postfix_subtract_,
            PMathExpression8 _math_expression8_
    )
    {
        SetMathExpression7 (_math_expression7_);
        SetPostfixSubtract (_postfix_subtract_);
        SetMathExpression8 (_math_expression8_);
    }

    public override Object Clone()
    {
        return new APostfixSubtractMathExpression7 (
            (PMathExpression7)CloneNode (_math_expression7_),
            (TPostfixSubtract)CloneNode (_postfix_subtract_),
            (PMathExpression8)CloneNode (_math_expression8_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPostfixSubtractMathExpression7(this);
    }

    public PMathExpression7 GetMathExpression7 ()
    {
        return _math_expression7_;
    }

    public void SetMathExpression7 (PMathExpression7 node)
    {
        if(_math_expression7_ != null)
        {
            _math_expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression7_ = node;
    }
    public TPostfixSubtract GetPostfixSubtract ()
    {
        return _postfix_subtract_;
    }

    public void SetPostfixSubtract (TPostfixSubtract node)
    {
        if(_postfix_subtract_ != null)
        {
            _postfix_subtract_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _postfix_subtract_ = node;
    }
    public PMathExpression8 GetMathExpression8 ()
    {
        return _math_expression8_;
    }

    public void SetMathExpression8 (PMathExpression8 node)
    {
        if(_math_expression8_ != null)
        {
            _math_expression8_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression8_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression7_)
            + ToString (_postfix_subtract_)
            + ToString (_math_expression8_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression7_ == child )
        {
            _math_expression7_ = null;
            return;
        }
        if ( _postfix_subtract_ == child )
        {
            _postfix_subtract_ = null;
            return;
        }
        if ( _math_expression8_ == child )
        {
            _math_expression8_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression7_ == oldChild )
        {
            SetMathExpression7 ((PMathExpression7) newChild);
            return;
        }
        if ( _postfix_subtract_ == oldChild )
        {
            SetPostfixSubtract ((TPostfixSubtract) newChild);
            return;
        }
        if ( _math_expression8_ == oldChild )
        {
            SetMathExpression8 ((PMathExpression8) newChild);
            return;
        }
    }

}
public sealed class AMathExpression7 : PMathExpression7
{
    private PMathExpression8 _math_expression8_;

    public AMathExpression7 ()
    {
    }

    public AMathExpression7 (
            PMathExpression8 _math_expression8_
    )
    {
        SetMathExpression8 (_math_expression8_);
    }

    public override Object Clone()
    {
        return new AMathExpression7 (
            (PMathExpression8)CloneNode (_math_expression8_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression7(this);
    }

    public PMathExpression8 GetMathExpression8 ()
    {
        return _math_expression8_;
    }

    public void SetMathExpression8 (PMathExpression8 node)
    {
        if(_math_expression8_ != null)
        {
            _math_expression8_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression8_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression8_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression8_ == child )
        {
            _math_expression8_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression8_ == oldChild )
        {
            SetMathExpression8 ((PMathExpression8) newChild);
            return;
        }
    }

}
public sealed class APostfixAddMathExpression8 : PMathExpression8
{
    private PMathExpression8 _math_expression8_;
    private TPostfixAdd _postfix_add_;
    private PMathExpression9 _math_expression9_;

    public APostfixAddMathExpression8 ()
    {
    }

    public APostfixAddMathExpression8 (
            PMathExpression8 _math_expression8_,
            TPostfixAdd _postfix_add_,
            PMathExpression9 _math_expression9_
    )
    {
        SetMathExpression8 (_math_expression8_);
        SetPostfixAdd (_postfix_add_);
        SetMathExpression9 (_math_expression9_);
    }

    public override Object Clone()
    {
        return new APostfixAddMathExpression8 (
            (PMathExpression8)CloneNode (_math_expression8_),
            (TPostfixAdd)CloneNode (_postfix_add_),
            (PMathExpression9)CloneNode (_math_expression9_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPostfixAddMathExpression8(this);
    }

    public PMathExpression8 GetMathExpression8 ()
    {
        return _math_expression8_;
    }

    public void SetMathExpression8 (PMathExpression8 node)
    {
        if(_math_expression8_ != null)
        {
            _math_expression8_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression8_ = node;
    }
    public TPostfixAdd GetPostfixAdd ()
    {
        return _postfix_add_;
    }

    public void SetPostfixAdd (TPostfixAdd node)
    {
        if(_postfix_add_ != null)
        {
            _postfix_add_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _postfix_add_ = node;
    }
    public PMathExpression9 GetMathExpression9 ()
    {
        return _math_expression9_;
    }

    public void SetMathExpression9 (PMathExpression9 node)
    {
        if(_math_expression9_ != null)
        {
            _math_expression9_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression9_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression8_)
            + ToString (_postfix_add_)
            + ToString (_math_expression9_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression8_ == child )
        {
            _math_expression8_ = null;
            return;
        }
        if ( _postfix_add_ == child )
        {
            _postfix_add_ = null;
            return;
        }
        if ( _math_expression9_ == child )
        {
            _math_expression9_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression8_ == oldChild )
        {
            SetMathExpression8 ((PMathExpression8) newChild);
            return;
        }
        if ( _postfix_add_ == oldChild )
        {
            SetPostfixAdd ((TPostfixAdd) newChild);
            return;
        }
        if ( _math_expression9_ == oldChild )
        {
            SetMathExpression9 ((PMathExpression9) newChild);
            return;
        }
    }

}
public sealed class AMathExpression8 : PMathExpression8
{
    private PMathExpression9 _math_expression9_;

    public AMathExpression8 ()
    {
    }

    public AMathExpression8 (
            PMathExpression9 _math_expression9_
    )
    {
        SetMathExpression9 (_math_expression9_);
    }

    public override Object Clone()
    {
        return new AMathExpression8 (
            (PMathExpression9)CloneNode (_math_expression9_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression8(this);
    }

    public PMathExpression9 GetMathExpression9 ()
    {
        return _math_expression9_;
    }

    public void SetMathExpression9 (PMathExpression9 node)
    {
        if(_math_expression9_ != null)
        {
            _math_expression9_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_expression9_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_expression9_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_expression9_ == child )
        {
            _math_expression9_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_expression9_ == oldChild )
        {
            SetMathExpression9 ((PMathExpression9) newChild);
            return;
        }
    }

}
public sealed class AExpparenMathExpression9 : PMathExpression9
{
    private TOpenparen _openparen_;
    private PBooleanExpression _boolean_expression_;
    private TCloseparen _closeparen_;

    public AExpparenMathExpression9 ()
    {
    }

    public AExpparenMathExpression9 (
            TOpenparen _openparen_,
            PBooleanExpression _boolean_expression_,
            TCloseparen _closeparen_
    )
    {
        SetOpenparen (_openparen_);
        SetBooleanExpression (_boolean_expression_);
        SetCloseparen (_closeparen_);
    }

    public override Object Clone()
    {
        return new AExpparenMathExpression9 (
            (TOpenparen)CloneNode (_openparen_),
            (PBooleanExpression)CloneNode (_boolean_expression_),
            (TCloseparen)CloneNode (_closeparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpparenMathExpression9(this);
    }

    public TOpenparen GetOpenparen ()
    {
        return _openparen_;
    }

    public void SetOpenparen (TOpenparen node)
    {
        if(_openparen_ != null)
        {
            _openparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openparen_ = node;
    }
    public PBooleanExpression GetBooleanExpression ()
    {
        return _boolean_expression_;
    }

    public void SetBooleanExpression (PBooleanExpression node)
    {
        if(_boolean_expression_ != null)
        {
            _boolean_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_expression_ = node;
    }
    public TCloseparen GetCloseparen ()
    {
        return _closeparen_;
    }

    public void SetCloseparen (TCloseparen node)
    {
        if(_closeparen_ != null)
        {
            _closeparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closeparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openparen_)
            + ToString (_boolean_expression_)
            + ToString (_closeparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openparen_ == child )
        {
            _openparen_ = null;
            return;
        }
        if ( _boolean_expression_ == child )
        {
            _boolean_expression_ = null;
            return;
        }
        if ( _closeparen_ == child )
        {
            _closeparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openparen_ == oldChild )
        {
            SetOpenparen ((TOpenparen) newChild);
            return;
        }
        if ( _boolean_expression_ == oldChild )
        {
            SetBooleanExpression ((PBooleanExpression) newChild);
            return;
        }
        if ( _closeparen_ == oldChild )
        {
            SetCloseparen ((TCloseparen) newChild);
            return;
        }
    }

}
public sealed class AMathExpression9 : PMathExpression9
{
    private PLiteral _literal_;

    public AMathExpression9 ()
    {
    }

    public AMathExpression9 (
            PLiteral _literal_
    )
    {
        SetLiteral (_literal_);
    }

    public override Object Clone()
    {
        return new AMathExpression9 (
            (PLiteral)CloneNode (_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpression9(this);
    }

    public PLiteral GetLiteral ()
    {
        return _literal_;
    }

    public void SetLiteral (PLiteral node)
    {
        if(_literal_ != null)
        {
            _literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _literal_ == child )
        {
            _literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _literal_ == oldChild )
        {
            SetLiteral ((PLiteral) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PMain _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PMain _base_,
        EOF _eof_)
    {
        SetPMain(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PMain) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PMain GetPMain()
    {
        return _base_;
    }
    public void SetPMain(PMain node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPMain((PMain) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
