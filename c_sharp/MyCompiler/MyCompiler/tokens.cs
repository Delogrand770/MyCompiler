/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {


public sealed class TWhitespace : Token
{
    public TWhitespace(string text)
    {
        Text = text;
    }

    public TWhitespace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWhitespace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWhitespace(this);
    }
}

public sealed class TComment : Token
{
    public TComment(string text)
    {
        Text = text;
    }

    public TComment(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComment(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComment(this);
    }
}

public sealed class TRwElse : Token
{
    public TRwElse(string text)
    {
        Text = text;
    }

    public TRwElse(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwElse(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwElse(this);
    }
}

public sealed class TRwConstant : Token
{
    public TRwConstant(string text)
    {
        Text = text;
    }

    public TRwConstant(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwConstant(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwConstant(this);
    }
}

public sealed class TRwFunction : Token
{
    public TRwFunction(string text)
    {
        Text = text;
    }

    public TRwFunction(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwFunction(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwFunction(this);
    }
}

public sealed class TRwReturn : Token
{
    public TRwReturn(string text)
    {
        Text = text;
    }

    public TRwReturn(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwReturn(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwReturn(this);
    }
}

public sealed class TRwMain : Token
{
    public TRwMain(string text)
    {
        Text = text;
    }

    public TRwMain(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwMain(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwMain(this);
    }
}

public sealed class TRwIf : Token
{
    public TRwIf(string text)
    {
        Text = text;
    }

    public TRwIf(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwIf(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwIf(this);
    }
}

public sealed class TRwWhile : Token
{
    public TRwWhile(string text)
    {
        Text = text;
    }

    public TRwWhile(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwWhile(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwWhile(this);
    }
}

public sealed class TRwFor : Token
{
    public TRwFor(string text)
    {
        Text = text;
    }

    public TRwFor(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TRwFor(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTRwFor(this);
    }
}

public sealed class TWrite : Token
{
    public TWrite(string text)
    {
        Text = text;
    }

    public TWrite(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TWrite(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTWrite(this);
    }
}

public sealed class TOpAdd : Token
{
    public TOpAdd(string text)
    {
        Text = text;
    }

    public TOpAdd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpAdd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpAdd(this);
    }
}

public sealed class TOpDivide : Token
{
    public TOpDivide(string text)
    {
        Text = text;
    }

    public TOpDivide(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpDivide(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpDivide(this);
    }
}

public sealed class TOpSubtract : Token
{
    public TOpSubtract(string text)
    {
        Text = text;
    }

    public TOpSubtract(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpSubtract(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpSubtract(this);
    }
}

public sealed class TOpMultiply : Token
{
    public TOpMultiply(string text)
    {
        Text = text;
    }

    public TOpMultiply(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpMultiply(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpMultiply(this);
    }
}

public sealed class TOpMod : Token
{
    public TOpMod(string text)
    {
        Text = text;
    }

    public TOpMod(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpMod(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpMod(this);
    }
}

public sealed class TPostfixAdd : Token
{
    public TPostfixAdd(string text)
    {
        Text = text;
    }

    public TPostfixAdd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPostfixAdd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPostfixAdd(this);
    }
}

public sealed class TPostfixSubtract : Token
{
    public TPostfixSubtract(string text)
    {
        Text = text;
    }

    public TPostfixSubtract(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPostfixSubtract(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPostfixSubtract(this);
    }
}

public sealed class TUnaryNot : Token
{
    public TUnaryNot(string text)
    {
        Text = text;
    }

    public TUnaryNot(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TUnaryNot(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTUnaryNot(this);
    }
}

public sealed class TBooleanAnd : Token
{
    public TBooleanAnd(string text)
    {
        Text = text;
    }

    public TBooleanAnd(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanAnd(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanAnd(this);
    }
}

public sealed class TBooleanOr : Token
{
    public TBooleanOr(string text)
    {
        Text = text;
    }

    public TBooleanOr(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanOr(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanOr(this);
    }
}

public sealed class TBooleanEquals : Token
{
    public TBooleanEquals(string text)
    {
        Text = text;
    }

    public TBooleanEquals(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanEquals(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanEquals(this);
    }
}

public sealed class TBooleanCompareEquals : Token
{
    public TBooleanCompareEquals(string text)
    {
        Text = text;
    }

    public TBooleanCompareEquals(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanCompareEquals(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanCompareEquals(this);
    }
}

public sealed class TBooleanCompareIsnotequals : Token
{
    public TBooleanCompareIsnotequals(string text)
    {
        Text = text;
    }

    public TBooleanCompareIsnotequals(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanCompareIsnotequals(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanCompareIsnotequals(this);
    }
}

public sealed class TBooleanGreaterEquals : Token
{
    public TBooleanGreaterEquals(string text)
    {
        Text = text;
    }

    public TBooleanGreaterEquals(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanGreaterEquals(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanGreaterEquals(this);
    }
}

public sealed class TBooleanLesserEquals : Token
{
    public TBooleanLesserEquals(string text)
    {
        Text = text;
    }

    public TBooleanLesserEquals(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanLesserEquals(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanLesserEquals(this);
    }
}

public sealed class TBooleanGreaterThan : Token
{
    public TBooleanGreaterThan(string text)
    {
        Text = text;
    }

    public TBooleanGreaterThan(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanGreaterThan(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanGreaterThan(this);
    }
}

public sealed class TBooleanLesserThan : Token
{
    public TBooleanLesserThan(string text)
    {
        Text = text;
    }

    public TBooleanLesserThan(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TBooleanLesserThan(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTBooleanLesserThan(this);
    }
}

public sealed class TOpenparen : Token
{
    public TOpenparen(string text)
    {
        Text = text;
    }

    public TOpenparen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpenparen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpenparen(this);
    }
}

public sealed class TCloseparen : Token
{
    public TCloseparen(string text)
    {
        Text = text;
    }

    public TCloseparen(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TCloseparen(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTCloseparen(this);
    }
}

public sealed class TOpenbrace : Token
{
    public TOpenbrace(string text)
    {
        Text = text;
    }

    public TOpenbrace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpenbrace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpenbrace(this);
    }
}

public sealed class TClosebrace : Token
{
    public TClosebrace(string text)
    {
        Text = text;
    }

    public TClosebrace(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TClosebrace(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTClosebrace(this);
    }
}

public sealed class TOpenbracket : Token
{
    public TOpenbracket(string text)
    {
        Text = text;
    }

    public TOpenbracket(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TOpenbracket(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTOpenbracket(this);
    }
}

public sealed class TClosebracket : Token
{
    public TClosebracket(string text)
    {
        Text = text;
    }

    public TClosebracket(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TClosebracket(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTClosebracket(this);
    }
}

public sealed class TSemicolon : Token
{
    public TSemicolon(string text)
    {
        Text = text;
    }

    public TSemicolon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TSemicolon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTSemicolon(this);
    }
}

public sealed class TColon : Token
{
    public TColon(string text)
    {
        Text = text;
    }

    public TColon(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TColon(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTColon(this);
    }
}

public sealed class TPeriod : Token
{
    public TPeriod(string text)
    {
        Text = text;
    }

    public TPeriod(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TPeriod(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTPeriod(this);
    }
}

public sealed class TComma : Token
{
    public TComma(string text)
    {
        Text = text;
    }

    public TComma(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TComma(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTComma(this);
    }
}

public sealed class TUnderscore : Token
{
    public TUnderscore(string text)
    {
        Text = text;
    }

    public TUnderscore(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TUnderscore(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTUnderscore(this);
    }
}

public sealed class TDoublequote : Token
{
    public TDoublequote(string text)
    {
        Text = text;
    }

    public TDoublequote(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TDoublequote(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTDoublequote(this);
    }
}

public sealed class TString : Token
{
    public TString(string text)
    {
        Text = text;
    }

    public TString(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TString(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTString(this);
    }
}

public sealed class TInteger : Token
{
    public TInteger(string text)
    {
        Text = text;
    }

    public TInteger(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TInteger(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTInteger(this);
    }
}

public sealed class TFloat : Token
{
    public TFloat(string text)
    {
        Text = text;
    }

    public TFloat(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TFloat(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTFloat(this);
    }
}

public sealed class TId : Token
{
    public TId(string text)
    {
        Text = text;
    }

    public TId(string text, int line, int pos)
    {
        Text = text;
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
      return new TId(Text, Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseTId(this);
    }
}


public abstract class Token : Node
{
    private string text;
    private int line;
    private int pos;

    public virtual string Text
    {
      get { return text; }
      set { text = value; }
    }

    public int Line
    {
      get { return line; }
      set { line = value; }
    }

    public int Pos
    {
      get { return pos; }
      set { pos = value; }
    }

    public override string ToString()
    {
        return text + " ";
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }
}

public sealed class EOF : Token
{
    public EOF()
    {
        Text = "";
    }

    public EOF(int line, int pos)
    {
        Text = "";
        Line = line;
        Pos = pos;
    }

    public override Object Clone()
    {
        return new EOF(Line, Pos);
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseEOF(this);
    }
}
}
