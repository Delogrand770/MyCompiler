/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAMain(AMain node);
    void CaseAIniConstants(AIniConstants node);
    void CaseADeclaredConstants(ADeclaredConstants node);
    void CaseANoneConstants(ANoneConstants node);
    void CaseAIniDecs(AIniDecs node);
    void CaseADeclaredDecs(ADeclaredDecs node);
    void CaseAArraysDecs(AArraysDecs node);
    void CaseADeclaredArrayDecs(ADeclaredArrayDecs node);
    void CaseAIniArrayDecs(AIniArrayDecs node);
    void CaseANoneArrayDecs(ANoneArrayDecs node);
    void CaseAIntegerLiteral(AIntegerLiteral node);
    void CaseAFloatLiteral(AFloatLiteral node);
    void CaseAIdLiteral(AIdLiteral node);
    void CaseAStringLiteral(AStringLiteral node);
    void CaseAArrayLiteral(AArrayLiteral node);
    void CaseAArrayArray(AArrayArray node);
    void CaseAMainentry(AMainentry node);
    void CaseAFuncs(AFuncs node);
    void CaseANoneFuncs(ANoneFuncs node);
    void CaseAParamParameter(AParamParameter node);
    void CaseAFinalparamParameter(AFinalparamParameter node);
    void CaseANoneParameter(ANoneParameter node);
    void CaseAIfStmnt(AIfStmnt node);
    void CaseAWhileStmnt(AWhileStmnt node);
    void CaseAForStmnt(AForStmnt node);
    void CaseAFuncCall(AFuncCall node);
    void CaseAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node);
    void CaseAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAForStatement(AForStatement node);
    void CaseAFunccallStatement(AFunccallStatement node);
    void CaseAReturnStatement(AReturnStatement node);
    void CaseANoneStatement(ANoneStatement node);
    void CaseAOrBooleanExpression(AOrBooleanExpression node);
    void CaseABooleanExpression(ABooleanExpression node);
    void CaseAAndBooleanExpression1(AAndBooleanExpression1 node);
    void CaseABooleanExpression1(ABooleanExpression1 node);
    void CaseACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node);
    void CaseABooleanExpression2(ABooleanExpression2 node);
    void CaseACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node);
    void CaseABooleanExpression3(ABooleanExpression3 node);
    void CaseAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node);
    void CaseABooleanExpression4(ABooleanExpression4 node);
    void CaseALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node);
    void CaseABooleanExpression5(ABooleanExpression5 node);
    void CaseAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node);
    void CaseABooleanExpression6(ABooleanExpression6 node);
    void CaseALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node);
    void CaseABooleanExpression7(ABooleanExpression7 node);
    void CaseAExpsubtractMathExpression(AExpsubtractMathExpression node);
    void CaseAMathExpression(AMathExpression node);
    void CaseAExpaddMathExpression1(AExpaddMathExpression1 node);
    void CaseAMathExpression1(AMathExpression1 node);
    void CaseAExpmodMathExpression2(AExpmodMathExpression2 node);
    void CaseAMathExpression2(AMathExpression2 node);
    void CaseAExpdivideMathExpression3(AExpdivideMathExpression3 node);
    void CaseAMathExpression3(AMathExpression3 node);
    void CaseAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node);
    void CaseAMathExpression4(AMathExpression4 node);
    void CaseAUnaryNotMathExpression5(AUnaryNotMathExpression5 node);
    void CaseAMathExpression5(AMathExpression5 node);
    void CaseAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node);
    void CaseAMathExpression6(AMathExpression6 node);
    void CaseAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node);
    void CaseAMathExpression7(AMathExpression7 node);
    void CaseAPostfixAddMathExpression8(APostfixAddMathExpression8 node);
    void CaseAMathExpression8(AMathExpression8 node);
    void CaseAExpparenMathExpression9(AExpparenMathExpression9 node);
    void CaseAMathExpression9(AMathExpression9 node);

    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTRwElse(TRwElse node);
    void CaseTRwConstant(TRwConstant node);
    void CaseTRwFunction(TRwFunction node);
    void CaseTRwReturn(TRwReturn node);
    void CaseTRwMain(TRwMain node);
    void CaseTRwIf(TRwIf node);
    void CaseTRwWhile(TRwWhile node);
    void CaseTRwFor(TRwFor node);
    void CaseTWrite(TWrite node);
    void CaseTOpAdd(TOpAdd node);
    void CaseTOpDivide(TOpDivide node);
    void CaseTOpSubtract(TOpSubtract node);
    void CaseTOpMultiply(TOpMultiply node);
    void CaseTOpMod(TOpMod node);
    void CaseTPostfixAdd(TPostfixAdd node);
    void CaseTPostfixSubtract(TPostfixSubtract node);
    void CaseTUnaryNot(TUnaryNot node);
    void CaseTBooleanAnd(TBooleanAnd node);
    void CaseTBooleanOr(TBooleanOr node);
    void CaseTBooleanEquals(TBooleanEquals node);
    void CaseTBooleanCompareEquals(TBooleanCompareEquals node);
    void CaseTBooleanCompareIsnotequals(TBooleanCompareIsnotequals node);
    void CaseTBooleanGreaterEquals(TBooleanGreaterEquals node);
    void CaseTBooleanLesserEquals(TBooleanLesserEquals node);
    void CaseTBooleanGreaterThan(TBooleanGreaterThan node);
    void CaseTBooleanLesserThan(TBooleanLesserThan node);
    void CaseTOpenparen(TOpenparen node);
    void CaseTCloseparen(TCloseparen node);
    void CaseTOpenbrace(TOpenbrace node);
    void CaseTClosebrace(TClosebrace node);
    void CaseTOpenbracket(TOpenbracket node);
    void CaseTClosebracket(TClosebracket node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTColon(TColon node);
    void CaseTPeriod(TPeriod node);
    void CaseTComma(TComma node);
    void CaseTUnderscore(TUnderscore node);
    void CaseTDoublequote(TDoublequote node);
    void CaseTString(TString node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTId(TId node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAMain(AMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIniConstants(AIniConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclaredConstants(ADeclaredConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneConstants(ANoneConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIniDecs(AIniDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclaredDecs(ADeclaredDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArraysDecs(AArraysDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIniArrayDecs(AIniArrayDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneArrayDecs(ANoneArrayDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerLiteral(AIntegerLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatLiteral(AFloatLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdLiteral(AIdLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringLiteral(AStringLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayLiteral(AArrayLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayArray(AArrayArray node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainentry(AMainentry node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncs(AFuncs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFuncs(ANoneFuncs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamParameter(AParamParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFinalparamParameter(AFinalparamParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParameter(ANoneParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStmnt(AIfStmnt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStmnt(AWhileStmnt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAForStmnt(AForStmnt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncCall(AFuncCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAForStatement(AForStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunccallStatement(AFunccallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAReturnStatement(AReturnStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneStatement(ANoneStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrBooleanExpression(AOrBooleanExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression(ABooleanExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression1(ABooleanExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression2(ABooleanExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression3(ABooleanExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression4(ABooleanExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression5(ABooleanExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression6(ABooleanExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanExpression7(ABooleanExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression(AMathExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression1(AMathExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression2(AMathExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression3(AMathExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression4(AMathExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression5(AMathExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression6(AMathExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression7(AMathExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression8(AMathExpression8 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpression9(AMathExpression9 node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwElse(TRwElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwConstant(TRwConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwFunction(TRwFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwReturn(TRwReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwMain(TRwMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwIf(TRwIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwWhile(TRwWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRwFor(TRwFor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWrite(TWrite node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpAdd(TOpAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpDivide(TOpDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpSubtract(TOpSubtract node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpMultiply(TOpMultiply node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpMod(TOpMod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPostfixAdd(TPostfixAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPostfixSubtract(TPostfixSubtract node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUnaryNot(TUnaryNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanAnd(TBooleanAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanOr(TBooleanOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanEquals(TBooleanEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanCompareEquals(TBooleanCompareEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanCompareIsnotequals(TBooleanCompareIsnotequals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanGreaterEquals(TBooleanGreaterEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanLesserEquals(TBooleanLesserEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanGreaterThan(TBooleanGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBooleanLesserThan(TBooleanLesserThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenparen(TOpenparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseparen(TCloseparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenbrace(TOpenbrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosebrace(TClosebrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenbracket(TOpenbracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosebracket(TClosebracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTColon(TColon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPeriod(TPeriod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTUnderscore(TUnderscore node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDoublequote(TDoublequote node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPMain().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAMain(AMain node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMain(AMain node)
    {
        DefaultOut(node);
    }

    public override void CaseAMain(AMain node)
    {
        InAMain(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        if(node.GetMainentry() != null)
        {
            node.GetMainentry().Apply(this);
        }
        if(node.GetFuncs() != null)
        {
            node.GetFuncs().Apply(this);
        }
        OutAMain(node);
    }
    public virtual void InAIniConstants(AIniConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIniConstants(AIniConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAIniConstants(AIniConstants node)
    {
        InAIniConstants(node);
        if(node.GetRwConstant() != null)
        {
            node.GetRwConstant().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetBooleanEquals() != null)
        {
            node.GetBooleanEquals().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAIniConstants(node);
    }
    public virtual void InADeclaredConstants(ADeclaredConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaredConstants(ADeclaredConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaredConstants(ADeclaredConstants node)
    {
        InADeclaredConstants(node);
        if(node.GetRwConstant() != null)
        {
            node.GetRwConstant().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutADeclaredConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InAIniDecs(AIniDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIniDecs(AIniDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAIniDecs(AIniDecs node)
    {
        InAIniDecs(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetBooleanEquals() != null)
        {
            node.GetBooleanEquals().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        OutAIniDecs(node);
    }
    public virtual void InADeclaredDecs(ADeclaredDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaredDecs(ADeclaredDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaredDecs(ADeclaredDecs node)
    {
        InADeclaredDecs(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        OutADeclaredDecs(node);
    }
    public virtual void InAArraysDecs(AArraysDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArraysDecs(AArraysDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAArraysDecs(AArraysDecs node)
    {
        InAArraysDecs(node);
        if(node.GetArrayDecs() != null)
        {
            node.GetArrayDecs().Apply(this);
        }
        OutAArraysDecs(node);
    }
    public virtual void InADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        InADeclaredArrayDecs(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        OutADeclaredArrayDecs(node);
    }
    public virtual void InAIniArrayDecs(AIniArrayDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIniArrayDecs(AIniArrayDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAIniArrayDecs(AIniArrayDecs node)
    {
        InAIniArrayDecs(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetBooleanEquals() != null)
        {
            node.GetBooleanEquals().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        OutAIniArrayDecs(node);
    }
    public virtual void InANoneArrayDecs(ANoneArrayDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArrayDecs(ANoneArrayDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArrayDecs(ANoneArrayDecs node)
    {
        InANoneArrayDecs(node);
        OutANoneArrayDecs(node);
    }
    public virtual void InAIntegerLiteral(AIntegerLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerLiteral(AIntegerLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerLiteral(AIntegerLiteral node)
    {
        InAIntegerLiteral(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerLiteral(node);
    }
    public virtual void InAFloatLiteral(AFloatLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatLiteral(AFloatLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatLiteral(AFloatLiteral node)
    {
        InAFloatLiteral(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatLiteral(node);
    }
    public virtual void InAIdLiteral(AIdLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdLiteral(AIdLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdLiteral(AIdLiteral node)
    {
        InAIdLiteral(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdLiteral(node);
    }
    public virtual void InAStringLiteral(AStringLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringLiteral(AStringLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringLiteral(AStringLiteral node)
    {
        InAStringLiteral(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringLiteral(node);
    }
    public virtual void InAArrayLiteral(AArrayLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayLiteral(AArrayLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayLiteral(AArrayLiteral node)
    {
        InAArrayLiteral(node);
        if(node.GetArray() != null)
        {
            node.GetArray().Apply(this);
        }
        OutAArrayLiteral(node);
    }
    public virtual void InAArrayArray(AArrayArray node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayArray(AArrayArray node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayArray(AArrayArray node)
    {
        InAArrayArray(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        OutAArrayArray(node);
    }
    public virtual void InAMainentry(AMainentry node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainentry(AMainentry node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainentry(AMainentry node)
    {
        InAMainentry(node);
        if(node.GetRwMain() != null)
        {
            node.GetRwMain().Apply(this);
        }
        if(node.GetColon() != null)
        {
            node.GetColon().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAMainentry(node);
    }
    public virtual void InAFuncs(AFuncs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncs(AFuncs node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncs(AFuncs node)
    {
        InAFuncs(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetColon() != null)
        {
            node.GetColon().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetFuncs() != null)
        {
            node.GetFuncs().Apply(this);
        }
        OutAFuncs(node);
    }
    public virtual void InANoneFuncs(ANoneFuncs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFuncs(ANoneFuncs node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFuncs(ANoneFuncs node)
    {
        InANoneFuncs(node);
        OutANoneFuncs(node);
    }
    public virtual void InAParamParameter(AParamParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamParameter(AParamParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamParameter(AParamParameter node)
    {
        InAParamParameter(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAParamParameter(node);
    }
    public virtual void InAFinalparamParameter(AFinalparamParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFinalparamParameter(AFinalparamParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFinalparamParameter(AFinalparamParameter node)
    {
        InAFinalparamParameter(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAFinalparamParameter(node);
    }
    public virtual void InANoneParameter(ANoneParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameter(ANoneParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameter(ANoneParameter node)
    {
        InANoneParameter(node);
        OutANoneParameter(node);
    }
    public virtual void InAIfStmnt(AIfStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmnt(AIfStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmnt(AIfStmnt node)
    {
        InAIfStmnt(node);
        if(node.GetRwIf() != null)
        {
            node.GetRwIf().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAIfStmnt(node);
    }
    public virtual void InAWhileStmnt(AWhileStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmnt(AWhileStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmnt(AWhileStmnt node)
    {
        InAWhileStmnt(node);
        if(node.GetRwWhile() != null)
        {
            node.GetRwWhile().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAWhileStmnt(node);
    }
    public virtual void InAForStmnt(AForStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForStmnt(AForStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAForStmnt(AForStmnt node)
    {
        InAForStmnt(node);
        if(node.GetRwFor() != null)
        {
            node.GetRwFor().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAForStmnt(node);
    }
    public virtual void InAFuncCall(AFuncCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncCall(AFuncCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncCall(AFuncCall node)
    {
        InAFuncCall(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAFuncCall(node);
    }
    public virtual void InAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        InAReturnsomethingReturnStmnt(node);
        if(node.GetRwReturn() != null)
        {
            node.GetRwReturn().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAReturnsomethingReturnStmnt(node);
    }
    public virtual void InAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        InAReturnnothingReturnStmnt(node);
        if(node.GetRwReturn() != null)
        {
            node.GetRwReturn().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAReturnnothingReturnStmnt(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIfStmnt() != null)
        {
            node.GetIfStmnt().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhileStmnt() != null)
        {
            node.GetWhileStmnt().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAForStatement(AForStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForStatement(AForStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAForStatement(AForStatement node)
    {
        InAForStatement(node);
        if(node.GetForStmnt() != null)
        {
            node.GetForStmnt().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAForStatement(node);
    }
    public virtual void InAFunccallStatement(AFunccallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunccallStatement(AFunccallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunccallStatement(AFunccallStatement node)
    {
        InAFunccallStatement(node);
        if(node.GetFuncCall() != null)
        {
            node.GetFuncCall().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAFunccallStatement(node);
    }
    public virtual void InAReturnStatement(AReturnStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnStatement(AReturnStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnStatement(AReturnStatement node)
    {
        InAReturnStatement(node);
        if(node.GetReturnStmnt() != null)
        {
            node.GetReturnStmnt().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAReturnStatement(node);
    }
    public virtual void InANoneStatement(ANoneStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStatement(ANoneStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStatement(ANoneStatement node)
    {
        InANoneStatement(node);
        OutANoneStatement(node);
    }
    public virtual void InAOrBooleanExpression(AOrBooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBooleanExpression(AOrBooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBooleanExpression(AOrBooleanExpression node)
    {
        InAOrBooleanExpression(node);
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetBooleanOr() != null)
        {
            node.GetBooleanOr().Apply(this);
        }
        if(node.GetBooleanExpression1() != null)
        {
            node.GetBooleanExpression1().Apply(this);
        }
        OutAOrBooleanExpression(node);
    }
    public virtual void InABooleanExpression(ABooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression(ABooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression(ABooleanExpression node)
    {
        InABooleanExpression(node);
        if(node.GetBooleanExpression1() != null)
        {
            node.GetBooleanExpression1().Apply(this);
        }
        OutABooleanExpression(node);
    }
    public virtual void InAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        InAAndBooleanExpression1(node);
        if(node.GetBooleanExpression1() != null)
        {
            node.GetBooleanExpression1().Apply(this);
        }
        if(node.GetBooleanAnd() != null)
        {
            node.GetBooleanAnd().Apply(this);
        }
        if(node.GetBooleanExpression2() != null)
        {
            node.GetBooleanExpression2().Apply(this);
        }
        OutAAndBooleanExpression1(node);
    }
    public virtual void InABooleanExpression1(ABooleanExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression1(ABooleanExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression1(ABooleanExpression1 node)
    {
        InABooleanExpression1(node);
        if(node.GetBooleanExpression2() != null)
        {
            node.GetBooleanExpression2().Apply(this);
        }
        OutABooleanExpression1(node);
    }
    public virtual void InACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        InACompareIsnotequalsBooleanExpression2(node);
        if(node.GetBooleanExpression2() != null)
        {
            node.GetBooleanExpression2().Apply(this);
        }
        if(node.GetBooleanCompareIsnotequals() != null)
        {
            node.GetBooleanCompareIsnotequals().Apply(this);
        }
        if(node.GetBooleanExpression3() != null)
        {
            node.GetBooleanExpression3().Apply(this);
        }
        OutACompareIsnotequalsBooleanExpression2(node);
    }
    public virtual void InABooleanExpression2(ABooleanExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression2(ABooleanExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression2(ABooleanExpression2 node)
    {
        InABooleanExpression2(node);
        if(node.GetBooleanExpression3() != null)
        {
            node.GetBooleanExpression3().Apply(this);
        }
        OutABooleanExpression2(node);
    }
    public virtual void InACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        InACompareEqualsBooleanExpression3(node);
        if(node.GetBooleanExpression3() != null)
        {
            node.GetBooleanExpression3().Apply(this);
        }
        if(node.GetBooleanCompareEquals() != null)
        {
            node.GetBooleanCompareEquals().Apply(this);
        }
        if(node.GetBooleanExpression4() != null)
        {
            node.GetBooleanExpression4().Apply(this);
        }
        OutACompareEqualsBooleanExpression3(node);
    }
    public virtual void InABooleanExpression3(ABooleanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression3(ABooleanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression3(ABooleanExpression3 node)
    {
        InABooleanExpression3(node);
        if(node.GetBooleanExpression4() != null)
        {
            node.GetBooleanExpression4().Apply(this);
        }
        OutABooleanExpression3(node);
    }
    public virtual void InAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        InAGreaterEqualsBooleanExpression4(node);
        if(node.GetBooleanExpression4() != null)
        {
            node.GetBooleanExpression4().Apply(this);
        }
        if(node.GetBooleanGreaterEquals() != null)
        {
            node.GetBooleanGreaterEquals().Apply(this);
        }
        if(node.GetBooleanExpression5() != null)
        {
            node.GetBooleanExpression5().Apply(this);
        }
        OutAGreaterEqualsBooleanExpression4(node);
    }
    public virtual void InABooleanExpression4(ABooleanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression4(ABooleanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression4(ABooleanExpression4 node)
    {
        InABooleanExpression4(node);
        if(node.GetBooleanExpression5() != null)
        {
            node.GetBooleanExpression5().Apply(this);
        }
        OutABooleanExpression4(node);
    }
    public virtual void InALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        InALesserEqualsBooleanExpression5(node);
        if(node.GetBooleanExpression5() != null)
        {
            node.GetBooleanExpression5().Apply(this);
        }
        if(node.GetBooleanLesserEquals() != null)
        {
            node.GetBooleanLesserEquals().Apply(this);
        }
        if(node.GetBooleanExpression6() != null)
        {
            node.GetBooleanExpression6().Apply(this);
        }
        OutALesserEqualsBooleanExpression5(node);
    }
    public virtual void InABooleanExpression5(ABooleanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression5(ABooleanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression5(ABooleanExpression5 node)
    {
        InABooleanExpression5(node);
        if(node.GetBooleanExpression6() != null)
        {
            node.GetBooleanExpression6().Apply(this);
        }
        OutABooleanExpression5(node);
    }
    public virtual void InAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        InAGreaterThanBooleanExpression6(node);
        if(node.GetBooleanExpression6() != null)
        {
            node.GetBooleanExpression6().Apply(this);
        }
        if(node.GetBooleanGreaterThan() != null)
        {
            node.GetBooleanGreaterThan().Apply(this);
        }
        if(node.GetBooleanExpression7() != null)
        {
            node.GetBooleanExpression7().Apply(this);
        }
        OutAGreaterThanBooleanExpression6(node);
    }
    public virtual void InABooleanExpression6(ABooleanExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression6(ABooleanExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression6(ABooleanExpression6 node)
    {
        InABooleanExpression6(node);
        if(node.GetBooleanExpression7() != null)
        {
            node.GetBooleanExpression7().Apply(this);
        }
        OutABooleanExpression6(node);
    }
    public virtual void InALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        InALesserThanBooleanExpression7(node);
        if(node.GetBooleanExpression7() != null)
        {
            node.GetBooleanExpression7().Apply(this);
        }
        if(node.GetBooleanLesserThan() != null)
        {
            node.GetBooleanLesserThan().Apply(this);
        }
        if(node.GetMathExpression() != null)
        {
            node.GetMathExpression().Apply(this);
        }
        OutALesserThanBooleanExpression7(node);
    }
    public virtual void InABooleanExpression7(ABooleanExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression7(ABooleanExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression7(ABooleanExpression7 node)
    {
        InABooleanExpression7(node);
        if(node.GetMathExpression() != null)
        {
            node.GetMathExpression().Apply(this);
        }
        OutABooleanExpression7(node);
    }
    public virtual void InAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        InAExpsubtractMathExpression(node);
        if(node.GetMathExpression() != null)
        {
            node.GetMathExpression().Apply(this);
        }
        if(node.GetOpSubtract() != null)
        {
            node.GetOpSubtract().Apply(this);
        }
        if(node.GetMathExpression1() != null)
        {
            node.GetMathExpression1().Apply(this);
        }
        OutAExpsubtractMathExpression(node);
    }
    public virtual void InAMathExpression(AMathExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression(AMathExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression(AMathExpression node)
    {
        InAMathExpression(node);
        if(node.GetMathExpression1() != null)
        {
            node.GetMathExpression1().Apply(this);
        }
        OutAMathExpression(node);
    }
    public virtual void InAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        InAExpaddMathExpression1(node);
        if(node.GetMathExpression1() != null)
        {
            node.GetMathExpression1().Apply(this);
        }
        if(node.GetOpAdd() != null)
        {
            node.GetOpAdd().Apply(this);
        }
        if(node.GetMathExpression2() != null)
        {
            node.GetMathExpression2().Apply(this);
        }
        OutAExpaddMathExpression1(node);
    }
    public virtual void InAMathExpression1(AMathExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression1(AMathExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression1(AMathExpression1 node)
    {
        InAMathExpression1(node);
        if(node.GetMathExpression2() != null)
        {
            node.GetMathExpression2().Apply(this);
        }
        OutAMathExpression1(node);
    }
    public virtual void InAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        InAExpmodMathExpression2(node);
        if(node.GetMathExpression2() != null)
        {
            node.GetMathExpression2().Apply(this);
        }
        if(node.GetOpMod() != null)
        {
            node.GetOpMod().Apply(this);
        }
        if(node.GetMathExpression3() != null)
        {
            node.GetMathExpression3().Apply(this);
        }
        OutAExpmodMathExpression2(node);
    }
    public virtual void InAMathExpression2(AMathExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression2(AMathExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression2(AMathExpression2 node)
    {
        InAMathExpression2(node);
        if(node.GetMathExpression3() != null)
        {
            node.GetMathExpression3().Apply(this);
        }
        OutAMathExpression2(node);
    }
    public virtual void InAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        InAExpdivideMathExpression3(node);
        if(node.GetMathExpression3() != null)
        {
            node.GetMathExpression3().Apply(this);
        }
        if(node.GetOpDivide() != null)
        {
            node.GetOpDivide().Apply(this);
        }
        if(node.GetMathExpression4() != null)
        {
            node.GetMathExpression4().Apply(this);
        }
        OutAExpdivideMathExpression3(node);
    }
    public virtual void InAMathExpression3(AMathExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression3(AMathExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression3(AMathExpression3 node)
    {
        InAMathExpression3(node);
        if(node.GetMathExpression4() != null)
        {
            node.GetMathExpression4().Apply(this);
        }
        OutAMathExpression3(node);
    }
    public virtual void InAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        InAExpmultiplyMathExpression4(node);
        if(node.GetMathExpression4() != null)
        {
            node.GetMathExpression4().Apply(this);
        }
        if(node.GetOpMultiply() != null)
        {
            node.GetOpMultiply().Apply(this);
        }
        if(node.GetMathExpression5() != null)
        {
            node.GetMathExpression5().Apply(this);
        }
        OutAExpmultiplyMathExpression4(node);
    }
    public virtual void InAMathExpression4(AMathExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression4(AMathExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression4(AMathExpression4 node)
    {
        InAMathExpression4(node);
        if(node.GetMathExpression5() != null)
        {
            node.GetMathExpression5().Apply(this);
        }
        OutAMathExpression4(node);
    }
    public virtual void InAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        InAUnaryNotMathExpression5(node);
        if(node.GetUnaryNot() != null)
        {
            node.GetUnaryNot().Apply(this);
        }
        if(node.GetMathExpression6() != null)
        {
            node.GetMathExpression6().Apply(this);
        }
        OutAUnaryNotMathExpression5(node);
    }
    public virtual void InAMathExpression5(AMathExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression5(AMathExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression5(AMathExpression5 node)
    {
        InAMathExpression5(node);
        if(node.GetMathExpression6() != null)
        {
            node.GetMathExpression6().Apply(this);
        }
        OutAMathExpression5(node);
    }
    public virtual void InAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        InAUnaryNegativeMathExpression6(node);
        if(node.GetOpSubtract() != null)
        {
            node.GetOpSubtract().Apply(this);
        }
        if(node.GetMathExpression7() != null)
        {
            node.GetMathExpression7().Apply(this);
        }
        OutAUnaryNegativeMathExpression6(node);
    }
    public virtual void InAMathExpression6(AMathExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression6(AMathExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression6(AMathExpression6 node)
    {
        InAMathExpression6(node);
        if(node.GetMathExpression7() != null)
        {
            node.GetMathExpression7().Apply(this);
        }
        OutAMathExpression6(node);
    }
    public virtual void InAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        InAPostfixSubtractMathExpression7(node);
        if(node.GetMathExpression7() != null)
        {
            node.GetMathExpression7().Apply(this);
        }
        if(node.GetPostfixSubtract() != null)
        {
            node.GetPostfixSubtract().Apply(this);
        }
        if(node.GetMathExpression8() != null)
        {
            node.GetMathExpression8().Apply(this);
        }
        OutAPostfixSubtractMathExpression7(node);
    }
    public virtual void InAMathExpression7(AMathExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression7(AMathExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression7(AMathExpression7 node)
    {
        InAMathExpression7(node);
        if(node.GetMathExpression8() != null)
        {
            node.GetMathExpression8().Apply(this);
        }
        OutAMathExpression7(node);
    }
    public virtual void InAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        InAPostfixAddMathExpression8(node);
        if(node.GetMathExpression8() != null)
        {
            node.GetMathExpression8().Apply(this);
        }
        if(node.GetPostfixAdd() != null)
        {
            node.GetPostfixAdd().Apply(this);
        }
        if(node.GetMathExpression9() != null)
        {
            node.GetMathExpression9().Apply(this);
        }
        OutAPostfixAddMathExpression8(node);
    }
    public virtual void InAMathExpression8(AMathExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression8(AMathExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression8(AMathExpression8 node)
    {
        InAMathExpression8(node);
        if(node.GetMathExpression9() != null)
        {
            node.GetMathExpression9().Apply(this);
        }
        OutAMathExpression8(node);
    }
    public virtual void InAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        InAExpparenMathExpression9(node);
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        OutAExpparenMathExpression9(node);
    }
    public virtual void InAMathExpression9(AMathExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression9(AMathExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression9(AMathExpression9 node)
    {
        InAMathExpression9(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutAMathExpression9(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPMain().Apply(this);
        OutStart(node);
    }

    public virtual void InAMain(AMain node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMain(AMain node)
    {
        DefaultOut(node);
    }

    public override void CaseAMain(AMain node)
    {
        InAMain(node);
        if(node.GetFuncs() != null)
        {
            node.GetFuncs().Apply(this);
        }
        if(node.GetMainentry() != null)
        {
            node.GetMainentry().Apply(this);
        }
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAMain(node);
    }
    public virtual void InAIniConstants(AIniConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIniConstants(AIniConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAIniConstants(AIniConstants node)
    {
        InAIniConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetBooleanEquals() != null)
        {
            node.GetBooleanEquals().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRwConstant() != null)
        {
            node.GetRwConstant().Apply(this);
        }
        OutAIniConstants(node);
    }
    public virtual void InADeclaredConstants(ADeclaredConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaredConstants(ADeclaredConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaredConstants(ADeclaredConstants node)
    {
        InADeclaredConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRwConstant() != null)
        {
            node.GetRwConstant().Apply(this);
        }
        OutADeclaredConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InAIniDecs(AIniDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIniDecs(AIniDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAIniDecs(AIniDecs node)
    {
        InAIniDecs(node);
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetBooleanEquals() != null)
        {
            node.GetBooleanEquals().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAIniDecs(node);
    }
    public virtual void InADeclaredDecs(ADeclaredDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaredDecs(ADeclaredDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaredDecs(ADeclaredDecs node)
    {
        InADeclaredDecs(node);
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclaredDecs(node);
    }
    public virtual void InAArraysDecs(AArraysDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArraysDecs(AArraysDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAArraysDecs(AArraysDecs node)
    {
        InAArraysDecs(node);
        if(node.GetArrayDecs() != null)
        {
            node.GetArrayDecs().Apply(this);
        }
        OutAArraysDecs(node);
    }
    public virtual void InADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaredArrayDecs(ADeclaredArrayDecs node)
    {
        InADeclaredArrayDecs(node);
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclaredArrayDecs(node);
    }
    public virtual void InAIniArrayDecs(AIniArrayDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIniArrayDecs(AIniArrayDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAIniArrayDecs(AIniArrayDecs node)
    {
        InAIniArrayDecs(node);
        if(node.GetDecs() != null)
        {
            node.GetDecs().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetBooleanEquals() != null)
        {
            node.GetBooleanEquals().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAIniArrayDecs(node);
    }
    public virtual void InANoneArrayDecs(ANoneArrayDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArrayDecs(ANoneArrayDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArrayDecs(ANoneArrayDecs node)
    {
        InANoneArrayDecs(node);
        OutANoneArrayDecs(node);
    }
    public virtual void InAIntegerLiteral(AIntegerLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerLiteral(AIntegerLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerLiteral(AIntegerLiteral node)
    {
        InAIntegerLiteral(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerLiteral(node);
    }
    public virtual void InAFloatLiteral(AFloatLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatLiteral(AFloatLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatLiteral(AFloatLiteral node)
    {
        InAFloatLiteral(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatLiteral(node);
    }
    public virtual void InAIdLiteral(AIdLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdLiteral(AIdLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdLiteral(AIdLiteral node)
    {
        InAIdLiteral(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdLiteral(node);
    }
    public virtual void InAStringLiteral(AStringLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringLiteral(AStringLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringLiteral(AStringLiteral node)
    {
        InAStringLiteral(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringLiteral(node);
    }
    public virtual void InAArrayLiteral(AArrayLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayLiteral(AArrayLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayLiteral(AArrayLiteral node)
    {
        InAArrayLiteral(node);
        if(node.GetArray() != null)
        {
            node.GetArray().Apply(this);
        }
        OutAArrayLiteral(node);
    }
    public virtual void InAArrayArray(AArrayArray node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayArray(AArrayArray node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayArray(AArrayArray node)
    {
        InAArrayArray(node);
        if(node.GetClosebracket() != null)
        {
            node.GetClosebracket().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetOpenbracket() != null)
        {
            node.GetOpenbracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAArrayArray(node);
    }
    public virtual void InAMainentry(AMainentry node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainentry(AMainentry node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainentry(AMainentry node)
    {
        InAMainentry(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetColon() != null)
        {
            node.GetColon().Apply(this);
        }
        if(node.GetRwMain() != null)
        {
            node.GetRwMain().Apply(this);
        }
        OutAMainentry(node);
    }
    public virtual void InAFuncs(AFuncs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncs(AFuncs node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncs(AFuncs node)
    {
        InAFuncs(node);
        if(node.GetFuncs() != null)
        {
            node.GetFuncs().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetRwFunction() != null)
        {
            node.GetRwFunction().Apply(this);
        }
        if(node.GetColon() != null)
        {
            node.GetColon().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFuncs(node);
    }
    public virtual void InANoneFuncs(ANoneFuncs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFuncs(ANoneFuncs node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFuncs(ANoneFuncs node)
    {
        InANoneFuncs(node);
        OutANoneFuncs(node);
    }
    public virtual void InAParamParameter(AParamParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamParameter(AParamParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamParameter(AParamParameter node)
    {
        InAParamParameter(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutAParamParameter(node);
    }
    public virtual void InAFinalparamParameter(AFinalparamParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFinalparamParameter(AFinalparamParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFinalparamParameter(AFinalparamParameter node)
    {
        InAFinalparamParameter(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutAFinalparamParameter(node);
    }
    public virtual void InANoneParameter(ANoneParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameter(ANoneParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameter(ANoneParameter node)
    {
        InANoneParameter(node);
        OutANoneParameter(node);
    }
    public virtual void InAIfStmnt(AIfStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmnt(AIfStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmnt(AIfStmnt node)
    {
        InAIfStmnt(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetRwIf() != null)
        {
            node.GetRwIf().Apply(this);
        }
        OutAIfStmnt(node);
    }
    public virtual void InAWhileStmnt(AWhileStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmnt(AWhileStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmnt(AWhileStmnt node)
    {
        InAWhileStmnt(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetRwWhile() != null)
        {
            node.GetRwWhile().Apply(this);
        }
        OutAWhileStmnt(node);
    }
    public virtual void InAForStmnt(AForStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForStmnt(AForStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAForStmnt(AForStmnt node)
    {
        InAForStmnt(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetRwFor() != null)
        {
            node.GetRwFor().Apply(this);
        }
        OutAForStmnt(node);
    }
    public virtual void InAFuncCall(AFuncCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncCall(AFuncCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncCall(AFuncCall node)
    {
        InAFuncCall(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAFuncCall(node);
    }
    public virtual void InAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnsomethingReturnStmnt(AReturnsomethingReturnStmnt node)
    {
        InAReturnsomethingReturnStmnt(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetRwReturn() != null)
        {
            node.GetRwReturn().Apply(this);
        }
        OutAReturnsomethingReturnStmnt(node);
    }
    public virtual void InAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnnothingReturnStmnt(AReturnnothingReturnStmnt node)
    {
        InAReturnnothingReturnStmnt(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetRwReturn() != null)
        {
            node.GetRwReturn().Apply(this);
        }
        OutAReturnnothingReturnStmnt(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetIfStmnt() != null)
        {
            node.GetIfStmnt().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetWhileStmnt() != null)
        {
            node.GetWhileStmnt().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAForStatement(AForStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForStatement(AForStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAForStatement(AForStatement node)
    {
        InAForStatement(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetForStmnt() != null)
        {
            node.GetForStmnt().Apply(this);
        }
        OutAForStatement(node);
    }
    public virtual void InAFunccallStatement(AFunccallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunccallStatement(AFunccallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunccallStatement(AFunccallStatement node)
    {
        InAFunccallStatement(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetFuncCall() != null)
        {
            node.GetFuncCall().Apply(this);
        }
        OutAFunccallStatement(node);
    }
    public virtual void InAReturnStatement(AReturnStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnStatement(AReturnStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnStatement(AReturnStatement node)
    {
        InAReturnStatement(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetReturnStmnt() != null)
        {
            node.GetReturnStmnt().Apply(this);
        }
        OutAReturnStatement(node);
    }
    public virtual void InANoneStatement(ANoneStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStatement(ANoneStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStatement(ANoneStatement node)
    {
        InANoneStatement(node);
        OutANoneStatement(node);
    }
    public virtual void InAOrBooleanExpression(AOrBooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBooleanExpression(AOrBooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBooleanExpression(AOrBooleanExpression node)
    {
        InAOrBooleanExpression(node);
        if(node.GetBooleanExpression1() != null)
        {
            node.GetBooleanExpression1().Apply(this);
        }
        if(node.GetBooleanOr() != null)
        {
            node.GetBooleanOr().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        OutAOrBooleanExpression(node);
    }
    public virtual void InABooleanExpression(ABooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression(ABooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression(ABooleanExpression node)
    {
        InABooleanExpression(node);
        if(node.GetBooleanExpression1() != null)
        {
            node.GetBooleanExpression1().Apply(this);
        }
        OutABooleanExpression(node);
    }
    public virtual void InAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBooleanExpression1(AAndBooleanExpression1 node)
    {
        InAAndBooleanExpression1(node);
        if(node.GetBooleanExpression2() != null)
        {
            node.GetBooleanExpression2().Apply(this);
        }
        if(node.GetBooleanAnd() != null)
        {
            node.GetBooleanAnd().Apply(this);
        }
        if(node.GetBooleanExpression1() != null)
        {
            node.GetBooleanExpression1().Apply(this);
        }
        OutAAndBooleanExpression1(node);
    }
    public virtual void InABooleanExpression1(ABooleanExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression1(ABooleanExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression1(ABooleanExpression1 node)
    {
        InABooleanExpression1(node);
        if(node.GetBooleanExpression2() != null)
        {
            node.GetBooleanExpression2().Apply(this);
        }
        OutABooleanExpression1(node);
    }
    public virtual void InACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareIsnotequalsBooleanExpression2(ACompareIsnotequalsBooleanExpression2 node)
    {
        InACompareIsnotequalsBooleanExpression2(node);
        if(node.GetBooleanExpression3() != null)
        {
            node.GetBooleanExpression3().Apply(this);
        }
        if(node.GetBooleanCompareIsnotequals() != null)
        {
            node.GetBooleanCompareIsnotequals().Apply(this);
        }
        if(node.GetBooleanExpression2() != null)
        {
            node.GetBooleanExpression2().Apply(this);
        }
        OutACompareIsnotequalsBooleanExpression2(node);
    }
    public virtual void InABooleanExpression2(ABooleanExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression2(ABooleanExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression2(ABooleanExpression2 node)
    {
        InABooleanExpression2(node);
        if(node.GetBooleanExpression3() != null)
        {
            node.GetBooleanExpression3().Apply(this);
        }
        OutABooleanExpression2(node);
    }
    public virtual void InACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareEqualsBooleanExpression3(ACompareEqualsBooleanExpression3 node)
    {
        InACompareEqualsBooleanExpression3(node);
        if(node.GetBooleanExpression4() != null)
        {
            node.GetBooleanExpression4().Apply(this);
        }
        if(node.GetBooleanCompareEquals() != null)
        {
            node.GetBooleanCompareEquals().Apply(this);
        }
        if(node.GetBooleanExpression3() != null)
        {
            node.GetBooleanExpression3().Apply(this);
        }
        OutACompareEqualsBooleanExpression3(node);
    }
    public virtual void InABooleanExpression3(ABooleanExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression3(ABooleanExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression3(ABooleanExpression3 node)
    {
        InABooleanExpression3(node);
        if(node.GetBooleanExpression4() != null)
        {
            node.GetBooleanExpression4().Apply(this);
        }
        OutABooleanExpression3(node);
    }
    public virtual void InAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualsBooleanExpression4(AGreaterEqualsBooleanExpression4 node)
    {
        InAGreaterEqualsBooleanExpression4(node);
        if(node.GetBooleanExpression5() != null)
        {
            node.GetBooleanExpression5().Apply(this);
        }
        if(node.GetBooleanGreaterEquals() != null)
        {
            node.GetBooleanGreaterEquals().Apply(this);
        }
        if(node.GetBooleanExpression4() != null)
        {
            node.GetBooleanExpression4().Apply(this);
        }
        OutAGreaterEqualsBooleanExpression4(node);
    }
    public virtual void InABooleanExpression4(ABooleanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression4(ABooleanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression4(ABooleanExpression4 node)
    {
        InABooleanExpression4(node);
        if(node.GetBooleanExpression5() != null)
        {
            node.GetBooleanExpression5().Apply(this);
        }
        OutABooleanExpression4(node);
    }
    public virtual void InALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseALesserEqualsBooleanExpression5(ALesserEqualsBooleanExpression5 node)
    {
        InALesserEqualsBooleanExpression5(node);
        if(node.GetBooleanExpression6() != null)
        {
            node.GetBooleanExpression6().Apply(this);
        }
        if(node.GetBooleanLesserEquals() != null)
        {
            node.GetBooleanLesserEquals().Apply(this);
        }
        if(node.GetBooleanExpression5() != null)
        {
            node.GetBooleanExpression5().Apply(this);
        }
        OutALesserEqualsBooleanExpression5(node);
    }
    public virtual void InABooleanExpression5(ABooleanExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression5(ABooleanExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression5(ABooleanExpression5 node)
    {
        InABooleanExpression5(node);
        if(node.GetBooleanExpression6() != null)
        {
            node.GetBooleanExpression6().Apply(this);
        }
        OutABooleanExpression5(node);
    }
    public virtual void InAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanBooleanExpression6(AGreaterThanBooleanExpression6 node)
    {
        InAGreaterThanBooleanExpression6(node);
        if(node.GetBooleanExpression7() != null)
        {
            node.GetBooleanExpression7().Apply(this);
        }
        if(node.GetBooleanGreaterThan() != null)
        {
            node.GetBooleanGreaterThan().Apply(this);
        }
        if(node.GetBooleanExpression6() != null)
        {
            node.GetBooleanExpression6().Apply(this);
        }
        OutAGreaterThanBooleanExpression6(node);
    }
    public virtual void InABooleanExpression6(ABooleanExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression6(ABooleanExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression6(ABooleanExpression6 node)
    {
        InABooleanExpression6(node);
        if(node.GetBooleanExpression7() != null)
        {
            node.GetBooleanExpression7().Apply(this);
        }
        OutABooleanExpression6(node);
    }
    public virtual void InALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseALesserThanBooleanExpression7(ALesserThanBooleanExpression7 node)
    {
        InALesserThanBooleanExpression7(node);
        if(node.GetMathExpression() != null)
        {
            node.GetMathExpression().Apply(this);
        }
        if(node.GetBooleanLesserThan() != null)
        {
            node.GetBooleanLesserThan().Apply(this);
        }
        if(node.GetBooleanExpression7() != null)
        {
            node.GetBooleanExpression7().Apply(this);
        }
        OutALesserThanBooleanExpression7(node);
    }
    public virtual void InABooleanExpression7(ABooleanExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanExpression7(ABooleanExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanExpression7(ABooleanExpression7 node)
    {
        InABooleanExpression7(node);
        if(node.GetMathExpression() != null)
        {
            node.GetMathExpression().Apply(this);
        }
        OutABooleanExpression7(node);
    }
    public virtual void InAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpsubtractMathExpression(AExpsubtractMathExpression node)
    {
        InAExpsubtractMathExpression(node);
        if(node.GetMathExpression1() != null)
        {
            node.GetMathExpression1().Apply(this);
        }
        if(node.GetOpSubtract() != null)
        {
            node.GetOpSubtract().Apply(this);
        }
        if(node.GetMathExpression() != null)
        {
            node.GetMathExpression().Apply(this);
        }
        OutAExpsubtractMathExpression(node);
    }
    public virtual void InAMathExpression(AMathExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression(AMathExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression(AMathExpression node)
    {
        InAMathExpression(node);
        if(node.GetMathExpression1() != null)
        {
            node.GetMathExpression1().Apply(this);
        }
        OutAMathExpression(node);
    }
    public virtual void InAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpaddMathExpression1(AExpaddMathExpression1 node)
    {
        InAExpaddMathExpression1(node);
        if(node.GetMathExpression2() != null)
        {
            node.GetMathExpression2().Apply(this);
        }
        if(node.GetOpAdd() != null)
        {
            node.GetOpAdd().Apply(this);
        }
        if(node.GetMathExpression1() != null)
        {
            node.GetMathExpression1().Apply(this);
        }
        OutAExpaddMathExpression1(node);
    }
    public virtual void InAMathExpression1(AMathExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression1(AMathExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression1(AMathExpression1 node)
    {
        InAMathExpression1(node);
        if(node.GetMathExpression2() != null)
        {
            node.GetMathExpression2().Apply(this);
        }
        OutAMathExpression1(node);
    }
    public virtual void InAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpmodMathExpression2(AExpmodMathExpression2 node)
    {
        InAExpmodMathExpression2(node);
        if(node.GetMathExpression3() != null)
        {
            node.GetMathExpression3().Apply(this);
        }
        if(node.GetOpMod() != null)
        {
            node.GetOpMod().Apply(this);
        }
        if(node.GetMathExpression2() != null)
        {
            node.GetMathExpression2().Apply(this);
        }
        OutAExpmodMathExpression2(node);
    }
    public virtual void InAMathExpression2(AMathExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression2(AMathExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression2(AMathExpression2 node)
    {
        InAMathExpression2(node);
        if(node.GetMathExpression3() != null)
        {
            node.GetMathExpression3().Apply(this);
        }
        OutAMathExpression2(node);
    }
    public virtual void InAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpdivideMathExpression3(AExpdivideMathExpression3 node)
    {
        InAExpdivideMathExpression3(node);
        if(node.GetMathExpression4() != null)
        {
            node.GetMathExpression4().Apply(this);
        }
        if(node.GetOpDivide() != null)
        {
            node.GetOpDivide().Apply(this);
        }
        if(node.GetMathExpression3() != null)
        {
            node.GetMathExpression3().Apply(this);
        }
        OutAExpdivideMathExpression3(node);
    }
    public virtual void InAMathExpression3(AMathExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression3(AMathExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression3(AMathExpression3 node)
    {
        InAMathExpression3(node);
        if(node.GetMathExpression4() != null)
        {
            node.GetMathExpression4().Apply(this);
        }
        OutAMathExpression3(node);
    }
    public virtual void InAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpmultiplyMathExpression4(AExpmultiplyMathExpression4 node)
    {
        InAExpmultiplyMathExpression4(node);
        if(node.GetMathExpression5() != null)
        {
            node.GetMathExpression5().Apply(this);
        }
        if(node.GetOpMultiply() != null)
        {
            node.GetOpMultiply().Apply(this);
        }
        if(node.GetMathExpression4() != null)
        {
            node.GetMathExpression4().Apply(this);
        }
        OutAExpmultiplyMathExpression4(node);
    }
    public virtual void InAMathExpression4(AMathExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression4(AMathExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression4(AMathExpression4 node)
    {
        InAMathExpression4(node);
        if(node.GetMathExpression5() != null)
        {
            node.GetMathExpression5().Apply(this);
        }
        OutAMathExpression4(node);
    }
    public virtual void InAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryNotMathExpression5(AUnaryNotMathExpression5 node)
    {
        InAUnaryNotMathExpression5(node);
        if(node.GetMathExpression6() != null)
        {
            node.GetMathExpression6().Apply(this);
        }
        if(node.GetUnaryNot() != null)
        {
            node.GetUnaryNot().Apply(this);
        }
        OutAUnaryNotMathExpression5(node);
    }
    public virtual void InAMathExpression5(AMathExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression5(AMathExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression5(AMathExpression5 node)
    {
        InAMathExpression5(node);
        if(node.GetMathExpression6() != null)
        {
            node.GetMathExpression6().Apply(this);
        }
        OutAMathExpression5(node);
    }
    public virtual void InAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryNegativeMathExpression6(AUnaryNegativeMathExpression6 node)
    {
        InAUnaryNegativeMathExpression6(node);
        if(node.GetMathExpression7() != null)
        {
            node.GetMathExpression7().Apply(this);
        }
        if(node.GetOpSubtract() != null)
        {
            node.GetOpSubtract().Apply(this);
        }
        OutAUnaryNegativeMathExpression6(node);
    }
    public virtual void InAMathExpression6(AMathExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression6(AMathExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression6(AMathExpression6 node)
    {
        InAMathExpression6(node);
        if(node.GetMathExpression7() != null)
        {
            node.GetMathExpression7().Apply(this);
        }
        OutAMathExpression6(node);
    }
    public virtual void InAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostfixSubtractMathExpression7(APostfixSubtractMathExpression7 node)
    {
        InAPostfixSubtractMathExpression7(node);
        if(node.GetMathExpression8() != null)
        {
            node.GetMathExpression8().Apply(this);
        }
        if(node.GetPostfixSubtract() != null)
        {
            node.GetPostfixSubtract().Apply(this);
        }
        if(node.GetMathExpression7() != null)
        {
            node.GetMathExpression7().Apply(this);
        }
        OutAPostfixSubtractMathExpression7(node);
    }
    public virtual void InAMathExpression7(AMathExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression7(AMathExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression7(AMathExpression7 node)
    {
        InAMathExpression7(node);
        if(node.GetMathExpression8() != null)
        {
            node.GetMathExpression8().Apply(this);
        }
        OutAMathExpression7(node);
    }
    public virtual void InAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPostfixAddMathExpression8(APostfixAddMathExpression8 node)
    {
        InAPostfixAddMathExpression8(node);
        if(node.GetMathExpression9() != null)
        {
            node.GetMathExpression9().Apply(this);
        }
        if(node.GetPostfixAdd() != null)
        {
            node.GetPostfixAdd().Apply(this);
        }
        if(node.GetMathExpression8() != null)
        {
            node.GetMathExpression8().Apply(this);
        }
        OutAPostfixAddMathExpression8(node);
    }
    public virtual void InAMathExpression8(AMathExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression8(AMathExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression8(AMathExpression8 node)
    {
        InAMathExpression8(node);
        if(node.GetMathExpression9() != null)
        {
            node.GetMathExpression9().Apply(this);
        }
        OutAMathExpression8(node);
    }
    public virtual void InAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpparenMathExpression9(AExpparenMathExpression9 node)
    {
        InAExpparenMathExpression9(node);
        if(node.GetCloseparen() != null)
        {
            node.GetCloseparen().Apply(this);
        }
        if(node.GetBooleanExpression() != null)
        {
            node.GetBooleanExpression().Apply(this);
        }
        if(node.GetOpenparen() != null)
        {
            node.GetOpenparen().Apply(this);
        }
        OutAExpparenMathExpression9(node);
    }
    public virtual void InAMathExpression9(AMathExpression9 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpression9(AMathExpression9 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpression9(AMathExpression9 node)
    {
        InAMathExpression9(node);
        if(node.GetLiteral() != null)
        {
            node.GetLiteral().Apply(this);
        }
        OutAMathExpression9(node);
    }
}
} // namespace comp5210.analysis
